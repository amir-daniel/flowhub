[{"C:\\Users\\97252\\Documents\\Projects\\river\\src\\index.js":"1","C:\\Users\\97252\\Documents\\Projects\\river\\src\\reportWebVitals.js":"2","C:\\Users\\97252\\Documents\\Projects\\river\\src\\App.js":"3","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\Timer.js":"4","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\AnimatedCounter.js":"5","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\NumberInput.js":"6"},{"size":500,"mtime":1641146692468,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1641146692873,"results":"9","hashOfConfig":"8"},{"size":5893,"mtime":1641846724633,"results":"10","hashOfConfig":"8"},{"size":2135,"mtime":1641650627030,"results":"11","hashOfConfig":"8"},{"size":2034,"mtime":1641326245950,"results":"12","hashOfConfig":"8"},{"size":3714,"mtime":1641847901286,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xvy84z",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"C:\\Users\\97252\\Documents\\Projects\\river\\src\\index.js",[],"C:\\Users\\97252\\Documents\\Projects\\river\\src\\reportWebVitals.js",[],"C:\\Users\\97252\\Documents\\Projects\\river\\src\\App.js",["32","33","34","35","36","37","38"],"/*global chrome*/\r\nimport \"./App.css\";\r\nimport NumberInput from \"./components/NumberInput\";\r\nimport Timer from \"./components/Timer\";\r\nimport react from \"react\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\n\r\nfunction App() {\r\n  // ETA Mode (Forward Looking),\r\n  // Sequential Mode (Time Elapsed)\r\n\r\n  let [time, setTime] = useState(null);\r\n  let [getStart, setStart] = useState(null);\r\n  let [getCurrent, setCurrent] = useState(null);\r\n  let [getEnd, setEnd] = useState(null);\r\n  let [getUserName, setUserName] = useState(null);\r\n  let [totalSeconds, setTotalSeconds] = useState(0);\r\n  let [TimersID, setTimersID] = useState(false);\r\n  let getTime = useRef();\r\n  let getTimersID = useRef();\r\n\r\n  getTimersID.current = TimersID;\r\n  getTime.current = time;\r\n\r\n  useEffect(() => {\r\n    // initialize some variables from chrome storage\r\n    chrome.storage.sync.get([\"startedRecordingAt\", \"savedTime\"], (data) => {\r\n      setTime(\r\n        data.startedRecordingAt === null // check if a recording is in progress\r\n          ? data.savedTime === null\r\n            ? 0\r\n            : data.savedTime\r\n          : (Date.now() - data.startedRecordingAt) / 1000\r\n      );\r\n    });\r\n\r\n    chrome.storage.sync.get(\r\n      [\"start\", \"progress\", \"end\", \"userName\", \"totalSeconds\"],\r\n      (data) => {\r\n        setCurrent(data.progress);\r\n        setEnd(data.end);\r\n        setStart(data.start);\r\n        setUserName(data.userName);\r\n        setTotalSeconds(data.totalSeconds);\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  const changeHandler = () => {\r\n    setTime(getTime.current + 1);\r\n\r\n    //update progress values from storage\r\n    chrome.storage.sync.get([\"progress\", \"totalSeconds\"], (data) => {\r\n      setCurrent(data.progress);\r\n      setTotalSeconds(data.totalSeconds + 1);\r\n      chrome.storage.sync.set({ totalSeconds });\r\n    });\r\n  };\r\n\r\n  const resetHandler = () => {\r\n    setTime(0);\r\n    setStart(0);\r\n    setCurrent(0);\r\n    setEnd(0);\r\n    chrome.storage.sync.set({\r\n      start: 0,\r\n      progress: 0,\r\n      end: 0,\r\n    });\r\n    // if reset mode requested, reset timer!\r\n  };\r\n\r\n  const minHandler = (event) => {\r\n    if (+event.target.value <= getCurrent) {\r\n      setStart(+event.target.value);\r\n      chrome.storage.sync.set({ start: +event.target.value });\r\n    }\r\n  };\r\n  const currentHandler = (event) => {\r\n    if (+event.target.value >= getStart) {\r\n      if (+event.target.value <= getEnd) {\r\n        setCurrent(+event.target.value);\r\n        chrome.storage.sync.set({ progress: +event.target.value });\r\n      }\r\n    }\r\n  };\r\n  const maxHandler = (event) => {\r\n    if (+event.target.value >= getCurrent) {\r\n      setEnd(+event.target.value);\r\n      chrome.storage.sync.set({ end: +event.target.value });\r\n    }\r\n  };\r\n\r\n  const timeAddHandler = () => {\r\n    if (getTimersID.current !== false) {\r\n      alert(\"Can't proceed while timer is active.\");\r\n      return;\r\n    }\r\n\r\n    let x = prompt(\r\n      \"Enter amount of time to load in the following format: h:mm:ss\"\r\n    );\r\n\r\n    let timeArr = x.split(\":\").reverse();\r\n\r\n    if (timeArr.length !== 3) {\r\n      alert(\"Invalid input! Too many or too few fields were input.\");\r\n      return;\r\n    }\r\n\r\n    if (\r\n      !Number.isInteger(+timeArr[0]) ||\r\n      !Number.isInteger(+timeArr[1]) ||\r\n      !Number.isInteger(+timeArr[2])\r\n    ) {\r\n      alert(\"Invalid input! All fields must be integers.\");\r\n      return;\r\n    }\r\n\r\n    //All checks passed, now we're diving in to the addition.\r\n    let desiredTimeInSeconds =\r\n      +timeArr[0] + +timeArr[1] * 60 + +timeArr[2] * 3600 + getTime.current;\r\n\r\n    setTime(desiredTimeInSeconds);\r\n\r\n    chrome.storage.sync.set({\r\n      savedTime: desiredTimeInSeconds,\r\n    });\r\n  };\r\n\r\n  const nameChangeHandler = () => {\r\n    let newUserName = prompt(\"Please choose your nickname:\")?.trim();\r\n    setUserName(newUserName.length === 0 ? getUserName : newUserName);\r\n    chrome.storage.sync.set({\r\n      userName: newUserName.length === 0 ? getUserName : newUserName,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div id=\"popup-container\" className=\"Card\">\r\n      <div className=\"Card-header\">\r\n        <a onClick={nameChangeHandler} className=\"headline\">\r\n          <b>{getUserName}</b>\r\n        </a>\r\n        <a onClick={timeAddHandler} className=\"mode\">\r\n          Import Time\r\n        </a>\r\n      </div>\r\n\r\n      <div className=\"Card-layout\">\r\n        <div className=\"stats seperated datasection\">\r\n          <div>Stats</div>\r\n          <div>\r\n            You have in total <b>{Math.round(totalSeconds / 3600)}</b> recorded\r\n            hours.\r\n          </div>\r\n        </div>\r\n        <div className=\"initialize-data seperated datasection\">\r\n          <div className=\"data-row\">\r\n            <div>Start</div>\r\n            <NumberInput\r\n              min={0}\r\n              max={getCurrent}\r\n              className=\"data-input\"\r\n              placeholder=\"0\"\r\n              onChange={minHandler}\r\n              value={getStart}\r\n            />\r\n          </div>\r\n          <div className=\"data-row\">\r\n            <div>Progress</div>\r\n            <NumberInput\r\n              min={getStart}\r\n              max={getEnd}\r\n              className=\"data-input\"\r\n              placeholder=\"0\"\r\n              onChange={currentHandler}\r\n              value={getCurrent}\r\n            />\r\n          </div>\r\n          <div className=\"data-row\">\r\n            <div>Finish</div>\r\n            <NumberInput\r\n              min={getCurrent}\r\n              className=\"data-input\"\r\n              placeholder=\"0\"\r\n              onChange={maxHandler}\r\n              value={getEnd}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"actions datasection\">\r\n          <div>Actions</div>\r\n          <div className=\"buttons-container\">\r\n            <button>Reset</button>\r\n            <button>Record</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\Timer.js",["39"],"/*global chrome*/\r\nimport { useEffect } from \"react\";\r\nconst Timer = (props) => {\r\n  const tickHandler = () => {\r\n    props.onTick();\r\n  };\r\n\r\n  const startHandler = () => {\r\n    if (props.timerID.current === false) {\r\n      props.modifyTimerID(\r\n        setInterval(() => {\r\n          tickHandler();\r\n        }, 1000)\r\n      );\r\n      chrome.storage.sync.get([\"startedRecordingAt\", \"savedTime\"], (data) => {\r\n        if (data.startedRecordingAt === null && data.savedTime === null) {\r\n          chrome.storage.sync.set({\r\n            startedRecordingAt: Date.now(),\r\n          });\r\n        } else {\r\n          chrome.storage.sync.get([\"startedRecordingAt\"], (data) => {});\r\n\r\n          chrome.storage.sync.set({\r\n            startedRecordingAt: Date.now() - props.value.current * 1000,\r\n            savedTime: null,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const stopHandler = () => {\r\n    clearInterval(props.timerID.current);\r\n    props.modifyTimerID(false);\r\n\r\n    chrome.storage.sync.set({\r\n      startedRecordingAt: null,\r\n      savedTime: props.value.current,\r\n    });\r\n  };\r\n\r\n  const resetHandler = () => {\r\n    // stopHandler(); // pause time recording\r\n    clearInterval(props.timerID.current);\r\n    props.modifyTimerID(false);\r\n    props.onReset(); // remove time recorded -> reset === true\r\n\r\n    chrome.storage.sync.set({\r\n      startedRecordingAt: null,\r\n      savedTime: null,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    chrome.storage.sync.get([\"startedRecordingAt\", \"savedTime\"], (data) => {\r\n      if (data.startedRecordingAt !== null && data.savedTime === null) {\r\n        startHandler();\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <span>\r\n      <button disabled={!props.isResettable} onClick={resetHandler}>\r\n        ⏹️\r\n      </button>\r\n      <button disabled={!props.timerID.current} onClick={stopHandler}>\r\n        ⏸️\r\n      </button>\r\n      <button\r\n        disabled={props.timerID.current !== false || !props.isRecordable}\r\n        // seems somewhat redundant\r\n        onClick={startHandler}\r\n      >\r\n        ▶️\r\n      </button>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n",["40","41"],"C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\AnimatedCounter.js",["42"],"import react from \"react\";\r\nimport { useState, useRef } from \"react\";\r\n\r\nconst AnimatedCounter = (props) => {\r\n  const [getOldValue, setOldValue] = useState(0); //useState(props.value);\r\n  const [timerID, setTimerID] = useState(false);\r\n  let oldValue = useRef();\r\n  oldValue.current = getOldValue;\r\n  const delayInSeconds = 2;\r\n  const refreshPerSecond =\r\n    props.refreshRate === undefined ? 25 : props.refreshRate; // default refresh rate is 25 Hz\r\n  const sign = (number) => (number < 0 ? -1 : 1);\r\n\r\n  const executeTick = (oldVal, incSize) => {\r\n    if (\r\n      (+oldVal + +incSize) * sign(+incSize) >=\r\n      +props.value * sign(+incSize)\r\n    ) {\r\n      // we've finished incrementing, let's reset the timer and oldValue\r\n      setOldValue(props.value);\r\n\r\n      clearTimeout(timerID);\r\n      setTimerID(false);\r\n    } else {\r\n      setOldValue(oldVal + incSize);\r\n\r\n      setTimerID(\r\n        setTimeout(\r\n          () => executeTick(oldVal + incSize, incSize),\r\n          1000 * (1 / refreshPerSecond)\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  let expression;\r\n  if (+oldValue.current !== +props.value && !timerID) {\r\n    // we get new value, set up increment\r\n    let tempInc =\r\n      (+props.value - +oldValue.current) / (delayInSeconds * refreshPerSecond);\r\n    tempInc = props.inc === undefined ? tempInc : props.inc * sign(tempInc);\r\n    // set minimum increment, if defined\r\n    setTimerID(\r\n      setTimeout(\r\n        () => executeTick(oldValue.current + tempInc, tempInc),\r\n        1000 * (1 / refreshPerSecond)\r\n      )\r\n    );\r\n\r\n    expression = Math.floor(100 * (oldValue.current + tempInc)) / 100;\r\n    return (\r\n      (props.callback === undefined\r\n        ? expression\r\n        : props.callback(expression)) || oldValue.current\r\n    );\r\n    // run the callback on expression if defined\r\n  }\r\n\r\n  expression = Math.floor(100 * oldValue.current) / 100;\r\n  return (\r\n    (props.callback === undefined ? expression : props.callback(expression)) ||\r\n    oldValue.current\r\n  );\r\n};\r\n\r\nexport default AnimatedCounter;\r\n",["43","44"],"C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\NumberInput.js",["45","46","47","48","49","50","51"],"/*global chrome*/\r\nimport \"./NumberInput.css\";\r\nimport AnimatedCounter from \"./AnimatedCounter\";\r\nimport Timer from \"./Timer.js\";\r\nimport { useRef, useEffect } from \"react\";\r\n\r\nconst playFile = (filepath) => {\r\n  var audioPlayer = new Audio(chrome.runtime.getURL(filepath));\r\n  audioPlayer.play();\r\n};\r\n\r\nconst designDigit = (num) => (+num < 10 ? \"0\" + num : num);\r\n\r\nconst destructureSeconds = (time) => {\r\n  time = Math.floor(time); // round time received in seconds\r\n\r\n  let sec = designDigit(time % 60);\r\n  let min = designDigit(((time - sec) / 60) % 60);\r\n  let hr = (time - sec - 60 * min) / 3600;\r\n\r\n  return [hr, min, sec];\r\n};\r\n\r\nconst beautify = (time) => {\r\n  let [hr, min, sec] = destructureSeconds(time);\r\n\r\n  return `${hr}h${min}m${sec}s`;\r\n};\r\n\r\nconst NumberInput = (props) => {\r\n  const inputRef = useRef(null);\r\n\r\n  const progressHandler = (event) => {\r\n    if (+props.itemMax === +event.target.value) {\r\n      playFile(\"sounds/complete.mp3\");\r\n      return;\r\n    }\r\n    playFile(\"sounds/increment.mp3\");\r\n  };\r\n\r\n  const getETA = () => {\r\n    let totalProgress = props.progress - props.itemMin;\r\n    let progressLeft = props.itemMax - props.progress;\r\n    let totalMins = props.time.current / 60;\r\n\r\n    if (\r\n      !props.timerID.current &\r\n      (props.progress === props.itemMin ||\r\n        props.itemMax !== props.progress ||\r\n        props.progress === null || // these 3 nulls are to wait for the data to load\r\n        props.itemMax === null ||\r\n        props.itemMin === null)\r\n    ) {\r\n      return \"\";\r\n    }\r\n\r\n    if (\r\n      props.timerID.current &&\r\n      (props.time.current < 1 || totalProgress === 0)\r\n    ) {\r\n      return \" ∞\";\r\n    }\r\n\r\n    if (progressLeft === 0) {\r\n      if (props.timerID.current) {\r\n        // probably redundant since button disabled, remove in the future\r\n        clearInterval(props.timerID.current);\r\n        props.setTimerID(false);\r\n\r\n        chrome.storage.sync.set({\r\n          // does it even go into effect?\r\n          startedRecordingAt: null,\r\n          savedTime: props.time.current,\r\n        });\r\n      }\r\n      return \" ✅\";\r\n    }\r\n\r\n    let paceInMins = totalProgress / totalMins;\r\n    let minsPerItem = 1 / paceInMins;\r\n    let minsLeft = minsPerItem * progressLeft;\r\n    let millisecondsLeft = minsLeft * 60 * 1000;\r\n    let ETADate =\r\n      props.itemMin === null ||\r\n      props.progress === null ||\r\n      props.itemMax === null\r\n        ? 0\r\n        : new Date(Date.now() + millisecondsLeft);\r\n    let dateFormatted = (\r\n      <span>\r\n        {\" \"}\r\n        <AnimatedCounter\r\n          key={\"h\"}\r\n          value={ETADate === 0 ? 0 : ETADate.getHours()}\r\n          inc={1}\r\n          refreshRate={24}\r\n          callback={designDigit}\r\n        />\r\n        :\r\n        <AnimatedCounter\r\n          key={\"m\"}\r\n          value={ETADate === 0 ? 0 : ETADate.getMinutes()}\r\n          inc={1}\r\n          refreshRate={8}\r\n          callback={designDigit}\r\n        />\r\n      </span>\r\n    );\r\n\r\n    return dateFormatted;\r\n  };\r\n\r\n  const getPercentage = () => {\r\n    let totalProgressMade = props.progress - props.itemMin;\r\n    let totalProgressPossible = props.itemMax - props.itemMin;\r\n\r\n    if (\r\n      totalProgressPossible === 0 ||\r\n      props.progress === null ||\r\n      props.itemMax === null ||\r\n      props.itemMin === null\r\n    ) {\r\n      // wait when data is loading\r\n      return 0;\r\n    }\r\n\r\n    return 100 * (totalProgressMade / totalProgressPossible);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        className={props.className}\r\n        placeholder={props.placeholder}\r\n        onChange={props.onChange}\r\n        value={props.itemMin}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NumberInput;\r\n",{"ruleId":"52","severity":1,"message":"53","line":4,"column":8,"nodeType":"54","messageId":"55","endLine":4,"endColumn":13},{"ruleId":"52","severity":1,"message":"56","line":5,"column":8,"nodeType":"54","messageId":"55","endLine":5,"endColumn":13},{"ruleId":"52","severity":1,"message":"57","line":18,"column":18,"nodeType":"54","messageId":"55","endLine":18,"endColumn":29},{"ruleId":"52","severity":1,"message":"58","line":49,"column":9,"nodeType":"54","messageId":"55","endLine":49,"endColumn":22},{"ruleId":"52","severity":1,"message":"59","line":60,"column":9,"nodeType":"54","messageId":"55","endLine":60,"endColumn":21},{"ruleId":"60","severity":1,"message":"61","line":142,"column":9,"nodeType":"62","endLine":142,"endColumn":61},{"ruleId":"60","severity":1,"message":"61","line":145,"column":9,"nodeType":"62","endLine":145,"endColumn":54},{"ruleId":"63","severity":1,"message":"64","line":60,"column":6,"nodeType":"65","endLine":60,"endColumn":8,"suggestions":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"52","severity":1,"message":"56","line":1,"column":8,"nodeType":"54","messageId":"55","endLine":1,"endColumn":13},{"ruleId":"67","replacedBy":"71"},{"ruleId":"69","replacedBy":"72"},{"ruleId":"52","severity":1,"message":"53","line":4,"column":8,"nodeType":"54","messageId":"55","endLine":4,"endColumn":13},{"ruleId":"52","severity":1,"message":"73","line":5,"column":18,"nodeType":"54","messageId":"55","endLine":5,"endColumn":27},{"ruleId":"52","severity":1,"message":"74","line":24,"column":7,"nodeType":"54","messageId":"55","endLine":24,"endColumn":15},{"ruleId":"52","severity":1,"message":"75","line":31,"column":9,"nodeType":"54","messageId":"55","endLine":31,"endColumn":17},{"ruleId":"52","severity":1,"message":"76","line":33,"column":9,"nodeType":"54","messageId":"55","endLine":33,"endColumn":24},{"ruleId":"52","severity":1,"message":"77","line":41,"column":9,"nodeType":"54","messageId":"55","endLine":41,"endColumn":15},{"ruleId":"52","severity":1,"message":"78","line":113,"column":9,"nodeType":"54","messageId":"55","endLine":113,"endColumn":22},"no-unused-vars","'Timer' is defined but never used.","Identifier","unusedVar","'react' is defined but never used.","'setTimersID' is assigned a value but never used.","'changeHandler' is assigned a value but never used.","'resetHandler' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'startHandler'. Either include it or remove the dependency array.","ArrayExpression",["79"],"no-native-reassign",["80"],"no-negated-in-lhs",["81"],["80"],["81"],"'useEffect' is defined but never used.","'beautify' is assigned a value but never used.","'inputRef' is assigned a value but never used.","'progressHandler' is assigned a value but never used.","'getETA' is assigned a value but never used.","'getPercentage' is assigned a value but never used.",{"desc":"82","fix":"83"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [startHandler]",{"range":"84","text":"85"},[1646,1648],"[startHandler]"]
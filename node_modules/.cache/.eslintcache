[{"C:\\Users\\97252\\Documents\\Projects\\river\\src\\index.js":"1","C:\\Users\\97252\\Documents\\Projects\\river\\src\\reportWebVitals.js":"2","C:\\Users\\97252\\Documents\\Projects\\river\\src\\App.js":"3","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\NumberInput.js":"4","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\Timer.js":"5","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\BufferElement.js":"6","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\AnimatedProgressBar.js":"7"},{"size":500,"mtime":1641146692468,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1641146692873,"results":"10","hashOfConfig":"9"},{"size":14009,"mtime":1641933128864,"results":"11","hashOfConfig":"9"},{"size":366,"mtime":1641890596583,"results":"12","hashOfConfig":"9"},{"size":897,"mtime":1641904089270,"results":"13","hashOfConfig":"9"},{"size":1886,"mtime":1641930591056,"results":"14","hashOfConfig":"9"},{"size":594,"mtime":1641931283957,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xvy84z",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\97252\\Documents\\Projects\\river\\src\\index.js",[],"C:\\Users\\97252\\Documents\\Projects\\river\\src\\reportWebVitals.js",[],"C:\\Users\\97252\\Documents\\Projects\\river\\src\\App.js",["34","35","36"],"/*global chrome*/\r\nimport \"./App.css\";\r\nimport NumberInput from \"./components/NumberInput\";\r\nimport Timer from \"./components/Timer\";\r\nimport BufferElement from \"./components/BufferElement\";\r\nimport AnimatedProgressBar from \"./components/AnimatedProgressBar\";\r\nimport { useState, useEffect, useReducer, useRef } from \"react\";\r\n\r\nfunction App() {\r\n  // ETA Mode (Forward Looking),\r\n  // Sequential Mode (Time Elapsed)\r\n\r\n  const [isBuffering, setIsBuffering] = useState(false);\r\n  const isInInitialization = useRef(true); // to signal to the buffer not to load while first initializing\r\n  const isBufferingRef = useRef(false);\r\n\r\n  isBufferingRef.current = isBuffering;\r\n\r\n  const designDigit = (num) => (+num < 10 ? \"0\" + num : num);\r\n\r\n  const destructureSeconds = (time) => {\r\n    time = Math.round(time); // round time received in seconds\r\n\r\n    let sec = designDigit(time % 60);\r\n    let min = designDigit(((time - sec) / 60) % 60);\r\n    let hr = (time - sec - 60 * min) / 3600;\r\n\r\n    return [hr, min, sec];\r\n  };\r\n\r\n  const beautify = (time) => {\r\n    let [hr, min, sec] = destructureSeconds(time);\r\n\r\n    return `${hr}h${min}m${sec}s`;\r\n  };\r\n\r\n  const filterInput = (newInput, oldInput) => {\r\n    if ((newInput + \"\")?.trim() === \"\") {\r\n      return 0;\r\n    }\r\n    return Number.isInteger(+newInput) ? +newInput : +oldInput;\r\n  };\r\n\r\n  const dataReducer = (state, action) => {\r\n    let newVal;\r\n    if (action.type === \"USER_INITIALIZE\") {\r\n      return {\r\n        start: filterInput(action.start, undefined),\r\n        current: filterInput(action.current, undefined),\r\n        end: filterInput(action.end, undefined),\r\n        time: action.time,\r\n        total: action.total,\r\n        timerID: state.timerID,\r\n      };\r\n    } else if (action.type === \"DATA_REFRESH\") {\r\n      return {\r\n        start: action.start,\r\n        current: action.progress,\r\n        end: action.end,\r\n        total: action.totalSeconds,\r\n        time: state.time,\r\n        timerID: state.timerID,\r\n      };\r\n    } else if (action.type === \"USER_ADDTIME\") {\r\n      chrome.storage.sync.set({\r\n        startedRecordingAt: null,\r\n        savedTime: +state.time + action.value,\r\n      });\r\n      return {\r\n        start: state.start,\r\n        current: state.current,\r\n        end: state.end,\r\n        time: +state.time + action.value,\r\n        total: state.total,\r\n        timerID: state.timerID,\r\n      };\r\n    } else if (action.type === \"START_CHANGE\") {\r\n      newVal = filterInput(+action.value, +state.start);\r\n      return {\r\n        start: newVal,\r\n        current: newVal > +state.current ? newVal : +state.current,\r\n        end: newVal > +state.end ? newVal : state.end,\r\n        time: state.time,\r\n        total: state.total,\r\n        timerID: state.timerID,\r\n      };\r\n    } else if (action.type === \"CURRENT_CHANGE\") {\r\n      newVal = filterInput(+action.value, +state.current);\r\n      return {\r\n        start: newVal < +state.start ? newVal : +state.start,\r\n        current: newVal,\r\n        end: newVal > +state.end ? newVal : +state.end,\r\n        time: state.time,\r\n        total: state.total,\r\n        timerID: state.timerID,\r\n      };\r\n    } else if (action.type === \"END_CHANGE\") {\r\n      newVal = filterInput(+action.value, +state.end);\r\n      return {\r\n        start: newVal < +state.start ? newVal : state.start,\r\n        current: newVal < +state.current ? newVal : state.current,\r\n        end: newVal,\r\n        time: state.time,\r\n        total: state.total,\r\n        timerID: state.timerID,\r\n      };\r\n    } else if (action.type === \"TOTAL_UPDATE\") {\r\n      // <----------- deprecated completely\r\n      throw new Error();\r\n    } else if (action.type === \"TIME_RESET\") {\r\n      let accumulatedTime = state.total + state.time;\r\n\r\n      clearInterval(state.timerID);\r\n      chrome.storage.sync.set({\r\n        startedRecordingAt: null,\r\n        savedTime: null,\r\n        totalSeconds: accumulatedTime,\r\n      });\r\n      return {\r\n        start: state.start,\r\n        current: state.current,\r\n        end: state.end,\r\n        time: null,\r\n        total: accumulatedTime,\r\n        timerID: false,\r\n      };\r\n    } else if (action.type === \"FULL_RESET\") {\r\n      let accumulatedTime = state.total + state.time;\r\n\r\n      clearInterval(state.timerID);\r\n      chrome.storage.sync.set({\r\n        startedRecordingAt: null,\r\n        savedTime: null,\r\n        totalSeconds: accumulatedTime,\r\n      });\r\n      return {\r\n        start: 0,\r\n        current: 0,\r\n        end: 0,\r\n        time: null,\r\n        total: accumulatedTime,\r\n        timerID: false,\r\n      };\r\n    } else if (action.type === \"MODIFY_TIMERID\") {\r\n      chrome.storage.sync.get([\"startedRecordingAt\"], (data) => {\r\n        if (data.startedRecordingAt === null) {\r\n          chrome.storage.sync.set({\r\n            startedRecordingAt: Date.now() - +state.time * 1000,\r\n            savedTime: null,\r\n          });\r\n        }\r\n      });\r\n      return {\r\n        start: state.start,\r\n        current: state.current,\r\n        end: state.end,\r\n        time: null,\r\n        total: state.total,\r\n        timerID: action.value,\r\n      };\r\n    } else if (action.type === \"TIME_START\") {\r\n      throw new Error(); // this area is now deprecated!\r\n    } else if (action.type === \"TIME_PAUSE\") {\r\n      let newTime = null;\r\n      clearInterval(state.timerID);\r\n\r\n      if (action.value !== null) {\r\n        newTime = (Date.now() - action.value) / 1000;\r\n        chrome.storage.sync.set({\r\n          startedRecordingAt: null,\r\n          savedTime: newTime,\r\n        });\r\n      }\r\n\r\n      return {\r\n        start: state.start,\r\n        current: state.current,\r\n        end: state.end,\r\n        time: newTime,\r\n        total: state.total,\r\n        timerID: false,\r\n      };\r\n    }\r\n  };\r\n\r\n  let [dataState, dataDispatch] = useReducer(dataReducer, {\r\n    start: null,\r\n    current: null,\r\n    end: null,\r\n    time: null,\r\n    total: null,\r\n    timerID: false,\r\n  });\r\n\r\n  let [getUserName, setUserName] = useState(null);\r\n  let [timeToShow, setTimeToShow] = useState(false); // it's false here to suit the JSX element later\r\n\r\n  useEffect(() => {\r\n    if (dataState.timerID === false) {\r\n      if (dataState.time > 0) {\r\n        setTimeToShow(dataState.time);\r\n      } else {\r\n        setTimeToShow(false);\r\n      }\r\n    } else {\r\n      chrome.storage.sync.get([\"startedRecordingAt\"], (data) => {\r\n        if (data.startedRecordingAt !== null) {\r\n          setTimeToShow((Date.now() - data.startedRecordingAt) / 1000);\r\n        }\r\n      });\r\n    }\r\n  }, [dataState.timerID, dataState.time]);\r\n\r\n  useEffect(() => {\r\n    // initialize some variables from chrome storage\r\n    chrome.storage.sync.get(\r\n      [\r\n        \"startedRecordingAt\",\r\n        \"savedTime\",\r\n        \"start\",\r\n        \"progress\",\r\n        \"end\",\r\n        \"userName\",\r\n        \"totalSeconds\",\r\n      ],\r\n      (data) => {\r\n        dataDispatch({\r\n          type: \"USER_INITIALIZE\",\r\n          time:\r\n            data.startedRecordingAt === null // check if a recording is in progress\r\n              ? data.savedTime === null\r\n                ? null\r\n                : data.savedTime\r\n              : null,\r\n          start: data.start,\r\n          current: data.progress,\r\n          end: data.end,\r\n          total: data.totalSeconds,\r\n        });\r\n        setUserName(data.userName);\r\n        isInInitialization.current = false;\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // update variables in a debounced way (to avoid going over the 1800 MAX_WRITE_OPERATIONS / hr)\r\n    let delayedUpdate;\r\n    if (!isInInitialization.current) {\r\n      // don't write back values on first initializating\r\n      delayedUpdate = setTimeout(() => {\r\n        chrome.storage.sync.set(\r\n          {\r\n            start: dataState.start,\r\n            progress: dataState.current,\r\n            end: dataState.end,\r\n          },\r\n          () => {\r\n            setIsBuffering(false);\r\n          }\r\n        );\r\n      }, 2000); // add buffering\r\n      setIsBuffering(true);\r\n    }\r\n    return () => {\r\n      clearTimeout(delayedUpdate);\r\n    };\r\n  }, [dataState.start, dataState.current, dataState.end]);\r\n\r\n  const timeAddHandler = () => {\r\n    if (dataState.timerID !== false) {\r\n      alert(\"Can't proceed while timer is active.\");\r\n      return;\r\n    }\r\n\r\n    let x = prompt(\r\n      \"Enter amount of time to load in the following format: h:mm:ss\"\r\n    );\r\n\r\n    if (x !== undefined && x !== null) {\r\n      let timeArr = x?.split(\":\").reverse();\r\n\r\n      if (timeArr?.length !== 3) {\r\n        alert(\"Invalid input! Too many or too few fields were input.\");\r\n        return;\r\n      }\r\n\r\n      if (\r\n        !Number.isInteger(+timeArr[0]) ||\r\n        !Number.isInteger(+timeArr[1]) ||\r\n        !Number.isInteger(+timeArr[2])\r\n      ) {\r\n        alert(\"Invalid input! All fields must be integers.\");\r\n        return;\r\n      }\r\n\r\n      //All checks passed, now we're diving in to the addition.\r\n      let desiredTimeInSeconds =\r\n        +timeArr[0] + +timeArr[1] * 60 + +timeArr[2] * 3600;\r\n\r\n      dataDispatch({ type: \"USER_ADDTIME\", value: desiredTimeInSeconds });\r\n    }\r\n  };\r\n\r\n  const nameChangeHandler = () => {\r\n    let newUserName = prompt(\"Please choose your nickname:\")?.trim();\r\n\r\n    if (newUserName?.length === 0) {\r\n      alert(\"Invalid input! Name must contain at least one charachter.\");\r\n    } else if (newUserName !== undefined && newUserName !== null) {\r\n      setUserName(newUserName);\r\n      chrome.storage.sync.set({\r\n        userName: newUserName,\r\n      });\r\n    }\r\n  };\r\n\r\n  const tickHandler = () => {\r\n    if (isBufferingRef.current === false) {\r\n      chrome.storage.sync.get(\r\n        [\"start\", \"progress\", \"end\", \"totalSeconds\", \"startedRecordingAt\"],\r\n        (data) => {\r\n          dataDispatch({\r\n            type: \"DATA_REFRESH\",\r\n            start: data.start,\r\n            progress: data.progress,\r\n            end: data.end,\r\n            totalSeconds: data.totalSeconds,\r\n          });\r\n          setTimeToShow(\r\n            (Date.now() - data.startedRecordingAt) / 1000 // add 1 second to account for delay\r\n          );\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"popup-container\" className=\"Card\">\r\n      <div className=\"Card-header\">\r\n        <a onClick={nameChangeHandler} className=\"headline\">\r\n          <b>{getUserName}</b>\r\n        </a>\r\n        <a onClick={timeAddHandler} className=\"mode\">\r\n          Import Time\r\n        </a>\r\n      </div>\r\n\r\n      <div className=\"Card-layout\">\r\n        <div className=\"stats seperated datasection\">\r\n          <div>\r\n            <b>Stats</b>\r\n          </div>\r\n          <div>\r\n            You have in total <b>{Math.round(dataState.total / 3600)}</b>{\" \"}\r\n            recorded hours.\r\n          </div>\r\n        </div>\r\n        <div className=\"initialize-data seperated datasection\">\r\n          <div className=\"data-row\">\r\n            <div>Start</div>\r\n            <NumberInput\r\n              min={0}\r\n              className=\"data-input\"\r\n              placeholder=\"0\"\r\n              onChange={(event) => {\r\n                dataDispatch({\r\n                  type: \"START_CHANGE\",\r\n                  value: event.target.value,\r\n                });\r\n              }}\r\n              value={+dataState.start === 0 ? \"\" : dataState.start}\r\n            />\r\n          </div>\r\n          <div className=\"data-row\">\r\n            <div>Progress</div>\r\n            <NumberInput\r\n              className=\"data-input\"\r\n              placeholder=\"0\"\r\n              onChange={(event) => {\r\n                dataDispatch({\r\n                  type: \"CURRENT_CHANGE\",\r\n                  value: event.target.value,\r\n                });\r\n              }}\r\n              value={+dataState.current === 0 ? \"\" : dataState.current}\r\n            />\r\n          </div>\r\n          <div className=\"data-row\">\r\n            <div>Finish</div>\r\n            <NumberInput\r\n              className=\"data-input\"\r\n              placeholder=\"0\"\r\n              onChange={(event) => {\r\n                dataDispatch({ type: \"END_CHANGE\", value: event.target.value });\r\n              }}\r\n              value={+dataState.end === 0 ? \"\" : dataState.end}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={\r\n            \"actions datasection\" +\r\n            (dataState.end > dataState.start ? \" button-seperated\" : \"\")\r\n          }\r\n        >\r\n          {/* <div>Actions</div> */}\r\n          <div className=\"buttons-container\">\r\n            <button\r\n              onClick={() => dataDispatch({ type: \"TIME_RESET\" })}\r\n              onDoubleClick={() => dataDispatch({ type: \"FULL_RESET\" })}\r\n            >\r\n              Reset\r\n            </button>\r\n            <BufferElement\r\n              isActive={isBuffering}\r\n              isInitializing={isInInitialization}\r\n              timeDisplay={\r\n                timeToShow !== false ? beautify(timeToShow) : timeToShow\r\n              }\r\n            />\r\n            <Timer\r\n              autoFocus={true}\r\n              timerID={dataState.timerID}\r\n              modifyTimerID={(newID) => {\r\n                dataDispatch({ type: \"MODIFY_TIMERID\", value: newID });\r\n              }}\r\n              onTick={tickHandler}\r\n              onPause={() =>\r\n                chrome.storage.sync.get([\"startedRecordingAt\"], (data) => {\r\n                  dataDispatch({\r\n                    type: \"TIME_PAUSE\",\r\n                    value: data.startedRecordingAt,\r\n                  });\r\n                })\r\n              }\r\n            />\r\n          </div>\r\n        </div>\r\n        {dataState.end > dataState.start ? (\r\n          <div className=\"progress-section prog-actions\">\r\n            <AnimatedProgressBar\r\n              progress={\r\n                dataState.end - dataState.start === 0\r\n                  ? 0\r\n                  : (dataState.current - dataState.start) /\r\n                    (dataState.end - dataState.start)\r\n              }\r\n            />\r\n          </div>\r\n        ) : (\r\n          false\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\NumberInput.js",["37"],"/*global chrome*/\r\nimport \"./NumberInput.css\";\r\n\r\nconst NumberInput = (props) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        min={0}\r\n        type=\"number\"\r\n        className={props.className}\r\n        placeholder={props.placeholder}\r\n        onChange={props.onChange}\r\n        value={props.value}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NumberInput;\r\n","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\Timer.js",["38"],"/*global chrome*/\r\nimport { useEffect } from \"react\";\r\n\r\nconst Timer = (props) => {\r\n  const tickHandler = () => {\r\n    props.onTick();\r\n  };\r\n\r\n  const startHandler = () => {\r\n    if (props.timerID === false) {\r\n      props.modifyTimerID(\r\n        setInterval(() => {\r\n          tickHandler();\r\n        }, 1000)\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    chrome.storage.sync.get([\"startedRecordingAt\", \"savedTime\"], (data) => {\r\n      if (data.startedRecordingAt !== null && data.savedTime === null) {\r\n        startHandler();\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <button\r\n      autoFocus={props.autoFocus}\r\n      onClick={() => {\r\n        if (props.timerID === false) {\r\n          startHandler();\r\n        } else {\r\n          props.onPause();\r\n        }\r\n      }}\r\n    >\r\n      {props.timerID === false ? \"Record\" : \"Pause\"}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\BufferElement.js",["39","40","41"],"import { clear } from \"@testing-library/user-event/dist/clear\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport \"./BufferElement.css\";\r\n\r\nconst BufferElement = (props) => {\r\n  let [message, setMessage] = useState(props.isActive);\r\n  let isFirstRender = useRef(true);\r\n\r\n  useEffect(() => {\r\n    let cleaningTimer;\r\n    if (\r\n      props.isInitializing.current === false &&\r\n      isFirstRender.current === true\r\n    ) {\r\n      // don't show loading screen on first initialization\r\n      isFirstRender.current = false;\r\n      setMessage(false);\r\n    } else if (props.isInitializing.current === true) {\r\n      setMessage(false);\r\n    } else if (props.isActive === false) {\r\n      setMessage(\r\n        <div>\r\n          <svg\r\n            class=\"checkmark\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            viewBox=\"0 0 52 52\"\r\n          >\r\n            <circle\r\n              class=\"checkmark__circle\"\r\n              cx=\"26\"\r\n              cy=\"26\"\r\n              r=\"25\"\r\n              fill=\"none\"\r\n            />\r\n            <path\r\n              class=\"checkmark__check\"\r\n              fill=\"none\"\r\n              d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"\r\n            />\r\n          </svg>\r\n        </div>\r\n      );\r\n      cleaningTimer = setTimeout(() => {\r\n        setMessage(false);\r\n      }, 2000);\r\n    } else {\r\n      setMessage(\r\n        <div className=\"lds-roller\">\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n        </div>\r\n      );\r\n    }\r\n    return () => {\r\n      clearTimeout(cleaningTimer);\r\n    };\r\n  }, [props.isActive, props.isInitializing.current]);\r\n\r\n  return message == false ? (\r\n    <div style={{ paddingTop: \"4px\" }}>{props.timeDisplay}</div>\r\n  ) : (\r\n    message\r\n  );\r\n};\r\n\r\nexport default BufferElement;\r\n","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\AnimatedProgressBar.js",[],{"ruleId":"42","severity":1,"message":"43","line":268,"column":6,"nodeType":"44","endLine":268,"endColumn":57,"suggestions":"45"},{"ruleId":"46","severity":1,"message":"47","line":341,"column":9,"nodeType":"48","endLine":341,"endColumn":61},{"ruleId":"46","severity":1,"message":"47","line":344,"column":9,"nodeType":"48","endLine":344,"endColumn":54},{"ruleId":"49","severity":1,"message":"50","line":1,"column":10,"nodeType":"51","messageId":"52","endLine":1,"endColumn":16},{"ruleId":"42","severity":1,"message":"53","line":25,"column":6,"nodeType":"44","endLine":25,"endColumn":8,"suggestions":"54"},{"ruleId":"49","severity":1,"message":"55","line":1,"column":10,"nodeType":"56","messageId":"52","endLine":1,"endColumn":15},{"ruleId":"42","severity":1,"message":"57","line":63,"column":6,"nodeType":"44","endLine":63,"endColumn":52,"suggestions":"58"},{"ruleId":"59","severity":1,"message":"60","line":65,"column":18,"nodeType":"61","messageId":"62","endLine":65,"endColumn":20},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dataState'. Either include it or remove the dependency array. Mutable values like 'dataState.current' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["63"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'chrome' is defined but never used.","Program","unusedVar","React Hook useEffect has a missing dependency: 'startHandler'. Either include it or remove the dependency array.",["64"],"'clear' is defined but never used.","Identifier","React Hook useEffect has a missing dependency: 'props.isInitializing'. Either include it or remove the dependency array. Mutable values like 'props.isInitializing.current' aren't valid dependencies because mutating them doesn't re-render the component.",["65"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"66","fix":"67"},{"desc":"68","fix":"69"},{"desc":"70","fix":"71"},"Update the dependencies array to be: [dataState.start, dataState.end, dataState]",{"range":"72","text":"73"},"Update the dependencies array to be: [startHandler]",{"range":"74","text":"75"},"Update the dependencies array to be: [props.isActive, props.isInitializing]",{"range":"76","text":"77"},[8044,8095],"[dataState.start, dataState.end, dataState]",[560,562],"[startHandler]",[1672,1718],"[props.isActive, props.isInitializing]"]
[{"C:\\Users\\97252\\Documents\\Projects\\river\\src\\index.js":"1","C:\\Users\\97252\\Documents\\Projects\\river\\src\\reportWebVitals.js":"2","C:\\Users\\97252\\Documents\\Projects\\river\\src\\App.js":"3","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\ItemData.js":"4","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\Timer.js":"5","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\AnimatedCounter.js":"6"},{"size":500,"mtime":1641146692468,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1641146692873,"results":"9","hashOfConfig":"8"},{"size":4220,"mtime":1641378301273,"results":"10","hashOfConfig":"8"},{"size":6388,"mtime":1641410044032,"results":"11","hashOfConfig":"8"},{"size":2039,"mtime":1641334269293,"results":"12","hashOfConfig":"8"},{"size":2034,"mtime":1641326245950,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xvy84z",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},"C:\\Users\\97252\\Documents\\Projects\\river\\src\\index.js",[],"C:\\Users\\97252\\Documents\\Projects\\river\\src\\reportWebVitals.js",[],"C:\\Users\\97252\\Documents\\Projects\\river\\src\\App.js",["30","31","32"],"/*global chrome*/\nimport \"./App.css\";\nimport ItemData from \"./components/ItemData\";\nimport Timer from \"./components/Timer\";\nimport react from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\n\nfunction App() {\n  let [time, setTime] = useState(null);\n  let [getStart, setStart] = useState(null);\n  let [getCurrent, setCurrent] = useState(null);\n  let [getEnd, setEnd] = useState(null);\n  let [TimersID, setTimersID] = useState(false);\n  let getTime = useRef();\n  let getTimersID = useRef();\n\n  getTimersID.current = TimersID;\n  getTime.current = time;\n\n  useEffect(() => {\n    chrome.storage.sync.get([\"startedRecordingAt\", \"savedTime\"], (data) => {\n      setTime(\n        data.startedRecordingAt === null\n          ? data.savedTime === null\n            ? 0\n            : data.savedTime\n          : (Date.now() - data.startedRecordingAt) / 1000\n      );\n    });\n\n    chrome.storage.sync.get([\"start\", \"progress\", \"end\"], (data) => {\n      setCurrent(data.progress);\n      setEnd(data.end);\n      setStart(data.start);\n    });\n\n    // chrome.storage.sync.get([\"isTimerOn\"], (data) => {\n    //   setTimersID(data.isTimerOn);\n    // });\n  }, []);\n\n  const changeHandler = () => {\n    setTime(getTime.current + 1);\n  };\n  const resetHandler = () => {\n    setTime(0);\n    setStart(0);\n    setCurrent(0);\n    setEnd(0);\n    chrome.storage.sync.set({\n      start: 0,\n      progress: 0,\n      end: 0,\n    });\n    // if reset mode requested, reset timer!\n  };\n\n  const minHandler = (event) => {\n    if (+event.target.value <= getCurrent) {\n      setStart(+event.target.value);\n      chrome.storage.sync.set({ start: +event.target.value });\n    }\n  };\n  const currentHandler = (event) => {\n    if (+event.target.value >= getStart) {\n      if (+event.target.value <= getEnd) {\n        setCurrent(+event.target.value);\n        chrome.storage.sync.set({ progress: +event.target.value });\n      }\n    }\n  };\n  const maxHandler = (event) => {\n    if (+event.target.value >= getCurrent) {\n      setEnd(+event.target.value);\n      chrome.storage.sync.set({ end: +event.target.value });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          {/* <Timer\n            value={getTime}\n            onTick={changeHandler}\n            timerID={getTimersID}\n            modifyTimerID={(id) => {\n              setTimersID(id);\n            }}\n          /> */}\n          <img\n            onClick={() => {\n              if (getTimersID.current !== false) {\n                alert(\"Can't proceed while timer is active.\");\n                return;\n              }\n\n              let x = prompt(\n                \"Enter amount of time to load in the following format: h:mm:ss\"\n              );\n\n              let timeArr = x.split(\":\").reverse();\n\n              if (timeArr.length !== 3) {\n                alert(\"Invalid input! Too many or too few fields were input.\");\n                return;\n              }\n\n              if (\n                !Number.isInteger(+timeArr[0]) ||\n                !Number.isInteger(+timeArr[1]) ||\n                !Number.isInteger(+timeArr[2])\n              ) {\n                alert(\"Invalid input! All fields must be integers.\");\n                return;\n              }\n\n              //All checks passed, now we're diving in to the addition.\n\n              let desiredTimeInSeconds =\n                +timeArr[0] +\n                +timeArr[1] * 60 +\n                +timeArr[2] * 3600 +\n                getTime.current;\n\n              setTime(desiredTimeInSeconds);\n\n              chrome.storage.sync.set({\n                savedTime: desiredTimeInSeconds,\n              });\n            }}\n            src=\"./logo.png\"\n          />\n          <ItemData\n            itemMin={getStart}\n            itemMax={getEnd}\n            progress={getCurrent}\n            onMinChange={minHandler}\n            onCurrentChange={currentHandler}\n            onMaxChange={maxHandler}\n            time={getTime}\n            timerID={getTimersID}\n            setTimerID={(id) => {\n              setTimersID(id);\n            }}\n            onTick={changeHandler}\n            onReset={resetHandler}\n          />\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\ItemData.js",["33","34","35"],"C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\Timer.js",["36"],"/*global chrome*/\r\nimport { useEffect } from \"react\";\r\nconst Timer = (props) => {\r\n  const tickHandler = () => {\r\n    props.onTick();\r\n  };\r\n\r\n  const startHandler = () => {\r\n    if (props.timerID.current === false) {\r\n      props.modifyTimerID(\r\n        setInterval(() => {\r\n          tickHandler();\r\n        }, 1000)\r\n      );\r\n      chrome.storage.sync.get([\"startedRecordingAt\", \"savedTime\"], (data) => {\r\n        if (data.startedRecordingAt === null && data.savedTime === null) {\r\n          chrome.storage.sync.set({\r\n            startedRecordingAt: Date.now(),\r\n          });\r\n        } else {\r\n          chrome.storage.sync.get([\"startedRecordingAt\"], (data) => {});\r\n\r\n          chrome.storage.sync.set({\r\n            startedRecordingAt: Date.now() - props.value.current * 1000,\r\n            savedTime: null,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const stopHandler = () => {\r\n    clearInterval(props.timerID.current);\r\n    props.modifyTimerID(false);\r\n\r\n    chrome.storage.sync.set({\r\n      startedRecordingAt: null,\r\n      savedTime: props.value.current,\r\n    });\r\n  };\r\n\r\n  const resetHandler = () => {\r\n    // stopHandler(); // pause time recording\r\n    clearInterval(props.timerID.current);\r\n    props.modifyTimerID(false);\r\n    props.onReset(); // remove time recorded -> reset === true\r\n\r\n    chrome.storage.sync.set({\r\n      startedRecordingAt: null,\r\n      savedTime: null,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    chrome.storage.sync.get([\"startedRecordingAt\", \"savedTime\"], (data) => {\r\n      if (data.startedRecordingAt !== null && data.savedTime === null) {\r\n        startHandler();\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <span>\r\n      <button disabled={!props.isResettable} onClick={resetHandler}>\r\n        ⏹️\r\n      </button>\r\n      <button disabled={!props.timerID.current} onClick={stopHandler}>\r\n        ⏸️\r\n      </button>\r\n      <button disabled={props.timerID.current} onClick={startHandler}>\r\n        ▶️\r\n      </button>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n",["37","38"],"C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\AnimatedCounter.js",["39"],"import react from \"react\";\r\nimport { useState, useRef } from \"react\";\r\n\r\nconst AnimatedCounter = (props) => {\r\n  const [getOldValue, setOldValue] = useState(0); //useState(props.value);\r\n  const [timerID, setTimerID] = useState(false);\r\n  let oldValue = useRef();\r\n  oldValue.current = getOldValue;\r\n  const delayInSeconds = 2;\r\n  const refreshPerSecond =\r\n    props.refreshRate === undefined ? 25 : props.refreshRate; // default refresh rate is 25 Hz\r\n  const sign = (number) => (number < 0 ? -1 : 1);\r\n\r\n  const executeTick = (oldVal, incSize) => {\r\n    if (\r\n      (+oldVal + +incSize) * sign(+incSize) >=\r\n      +props.value * sign(+incSize)\r\n    ) {\r\n      // we've finished incrementing, let's reset the timer and oldValue\r\n      setOldValue(props.value);\r\n\r\n      clearTimeout(timerID);\r\n      setTimerID(false);\r\n    } else {\r\n      setOldValue(oldVal + incSize);\r\n\r\n      setTimerID(\r\n        setTimeout(\r\n          () => executeTick(oldVal + incSize, incSize),\r\n          1000 * (1 / refreshPerSecond)\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  let expression;\r\n  if (+oldValue.current !== +props.value && !timerID) {\r\n    // we get new value, set up increment\r\n    let tempInc =\r\n      (+props.value - +oldValue.current) / (delayInSeconds * refreshPerSecond);\r\n    tempInc = props.inc === undefined ? tempInc : props.inc * sign(tempInc);\r\n    // set minimum increment, if defined\r\n    setTimerID(\r\n      setTimeout(\r\n        () => executeTick(oldValue.current + tempInc, tempInc),\r\n        1000 * (1 / refreshPerSecond)\r\n      )\r\n    );\r\n\r\n    expression = Math.floor(100 * (oldValue.current + tempInc)) / 100;\r\n    return (\r\n      (props.callback === undefined\r\n        ? expression\r\n        : props.callback(expression)) || oldValue.current\r\n    );\r\n    // run the callback on expression if defined\r\n  }\r\n\r\n  expression = Math.floor(100 * oldValue.current) / 100;\r\n  return (\r\n    (props.callback === undefined ? expression : props.callback(expression)) ||\r\n    oldValue.current\r\n  );\r\n};\r\n\r\nexport default AnimatedCounter;\r\n",{"ruleId":"40","severity":1,"message":"41","line":4,"column":8,"nodeType":"42","messageId":"43","endLine":4,"endColumn":13},{"ruleId":"40","severity":1,"message":"44","line":5,"column":8,"nodeType":"42","messageId":"43","endLine":5,"endColumn":13},{"ruleId":"45","severity":1,"message":"46","line":91,"column":11,"nodeType":"47","endLine":133,"endColumn":13},{"ruleId":"40","severity":1,"message":"48","line":5,"column":18,"nodeType":"42","messageId":"43","endLine":5,"endColumn":27},{"ruleId":"49","severity":1,"message":"50","line":47,"column":23,"nodeType":"51","messageId":"52","endLine":47,"endColumn":25},{"ruleId":"49","severity":1,"message":"50","line":167,"column":53,"nodeType":"51","messageId":"52","endLine":167,"endColumn":55},{"ruleId":"53","severity":1,"message":"54","line":60,"column":6,"nodeType":"55","endLine":60,"endColumn":8,"suggestions":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"40","severity":1,"message":"44","line":1,"column":8,"nodeType":"42","messageId":"43","endLine":1,"endColumn":13},"no-unused-vars","'Timer' is defined but never used.","Identifier","unusedVar","'react' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'startHandler'. Either include it or remove the dependency array.","ArrayExpression",["61"],"no-native-reassign",["62"],"no-negated-in-lhs",["63"],{"desc":"64","fix":"65"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [startHandler]",{"range":"66","text":"67"},[1646,1648],"[startHandler]"]
[{"C:\\Users\\97252\\Documents\\Projects\\river\\src\\index.js":"1","C:\\Users\\97252\\Documents\\Projects\\river\\src\\reportWebVitals.js":"2","C:\\Users\\97252\\Documents\\Projects\\river\\src\\App.js":"3","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\ItemData.js":"4","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\Timer.js":"5","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\AnimatedCounter.js":"6"},{"size":500,"mtime":1641146692468,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1641146692873,"results":"9","hashOfConfig":"8"},{"size":2723,"mtime":1641316701590,"results":"10","hashOfConfig":"8"},{"size":5604,"mtime":1641316944268,"results":"11","hashOfConfig":"8"},{"size":2009,"mtime":1641307475776,"results":"12","hashOfConfig":"8"},{"size":1953,"mtime":1641317281022,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xvy84z",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"C:\\Users\\97252\\Documents\\Projects\\river\\src\\index.js",[],"C:\\Users\\97252\\Documents\\Projects\\river\\src\\reportWebVitals.js",[],"C:\\Users\\97252\\Documents\\Projects\\river\\src\\App.js",["30","31","32"],"/*global chrome*/\nimport \"./App.css\";\nimport ItemData from \"./components/ItemData\";\nimport Timer from \"./components/Timer\";\nimport react from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\n\nfunction App() {\n  let [time, setTime] = useState(null);\n  let [getStart, setStart] = useState(null);\n  let [getCurrent, setCurrent] = useState(null);\n  let [getEnd, setEnd] = useState(null);\n  let [TimersID, setTimersID] = useState(false);\n  let getTime = useRef();\n  let getTimersID = useRef();\n\n  getTimersID.current = TimersID;\n  getTime.current = time;\n\n  useEffect(() => {\n    chrome.storage.sync.get([\"startedRecordingAt\", \"savedTime\"], (data) => {\n      setTime(\n        data.startedRecordingAt === null\n          ? data.savedTime === null\n            ? 0\n            : data.savedTime\n          : (Date.now() - data.startedRecordingAt) / 1000\n      );\n    });\n\n    chrome.storage.sync.get([\"start\", \"progress\", \"end\"], (data) => {\n      setCurrent(data.progress);\n      setEnd(data.end);\n      setStart(data.start);\n    });\n\n    // chrome.storage.sync.get([\"isTimerOn\"], (data) => {\n    //   setTimersID(data.isTimerOn);\n    // });\n  }, []);\n\n  const changeHandler = (reset = false) => {\n    setTime((prevState) => (reset ? 0 : prevState + 1));\n  };\n\n  const minHandler = (event) => {\n    if (+event.target.value <= getCurrent) {\n      setStart(+event.target.value);\n      chrome.storage.sync.set({ start: +event.target.value });\n    }\n  };\n  const currentHandler = (event) => {\n    if (+event.target.value >= getStart) {\n      if (+event.target.value <= getEnd) {\n        setCurrent(+event.target.value);\n        chrome.storage.sync.set({ progress: +event.target.value });\n      }\n    }\n  };\n  const maxHandler = (event) => {\n    if (+event.target.value >= getCurrent) {\n      setEnd(+event.target.value);\n      chrome.storage.sync.set({ end: +event.target.value });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          {/* <Timer\n            value={getTime}\n            onTick={changeHandler}\n            timerID={getTimersID}\n            modifyTimerID={(id) => {\n              setTimersID(id);\n            }}\n          /> */}\n          <img src=\"./logo.png\" />\n          <ItemData\n            itemMin={getStart}\n            itemMax={getEnd}\n            progress={getCurrent}\n            onMinChange={minHandler}\n            onCurrentChange={currentHandler}\n            onMaxChange={maxHandler}\n            time={getTime}\n            timerID={getTimersID}\n            setTimerID={(id) => {\n              setTimersID(id);\n            }}\n            onTick={changeHandler}\n          />\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\ItemData.js",["33","34"],"/*global chrome*/\r\nimport styles from \"./ItemData.module.css\";\r\nimport AnimatedCounter from \"./AnimatedCounter\";\r\nimport Timer from \"./Timer.js\";\r\nimport { useRef, useEffect } from \"react\";\r\n\r\nconst playFile = (filepath) => {\r\n  var audioPlayer = new Audio(chrome.runtime.getURL(filepath));\r\n  audioPlayer.play();\r\n};\r\nconst designDigit = (num) => (+num < 10 ? \"0\" + num : num);\r\nconst beautify = (time) => {\r\n  time = Math.floor(time); // round time received in seconds\r\n\r\n  let sec = designDigit(time % 60);\r\n  let min = designDigit(((time - sec) / 60) % 60);\r\n  let hr = (time - sec - 60 * min) / 3600;\r\n\r\n  return `${hr}h${min}m${sec}s`;\r\n};\r\n\r\nconst ItemData = (props) => {\r\n  const inputRef = useRef(null);\r\n\r\n  // useEffect(() => {\r\n  //   if (inputRef.current) {\r\n  //     inputRef.current.focus();\r\n  //   }\r\n  // }, []);\r\n\r\n  const progressHandler = (event) => {\r\n    if (+props.itemMax === +event.target.value) {\r\n      playFile(\"sounds/complete.mp3\");\r\n      return;\r\n    }\r\n    playFile(\"sounds/increment.mp3\");\r\n  };\r\n\r\n  const getETA = () => {\r\n    let totalProgress = props.progress - props.itemMin;\r\n    let progressLeft = props.itemMax - props.progress;\r\n    let totalMins = props.time.current / 60;\r\n\r\n    if (\r\n      props.time.current < 1 ||\r\n      totalProgress === 0 ||\r\n      (!props.timerID.current && props.itemMax != props.progress)\r\n    ) {\r\n      return \"∞\";\r\n    }\r\n\r\n    if (progressLeft === 0) {\r\n      if (props.timerID.current) {\r\n        clearInterval(props.timerID.current);\r\n        props.setTimerID(false);\r\n      }\r\n      return \"✅\";\r\n    }\r\n\r\n    let paceInMins = totalProgress / totalMins;\r\n    let minsPerItem = 1 / paceInMins;\r\n    let minsLeft = minsPerItem * progressLeft;\r\n    let millisecondsLeft = minsLeft * 60 * 1000;\r\n    let ETADate = new Date(Date.now() + millisecondsLeft);\r\n    let dateFormatted = (\r\n      <span>\r\n        <AnimatedCounter\r\n          key={\"h\"}\r\n          value={ETADate.getHours()}\r\n          inc={1}\r\n          refreshRate={24}\r\n          callback={designDigit}\r\n        />\r\n        :\r\n        <AnimatedCounter\r\n          key={\"m\"}\r\n          value={designDigit(ETADate.getMinutes())}\r\n          inc={1}\r\n          refreshRate={8}\r\n          callback={designDigit}\r\n        />\r\n      </span>\r\n    );\r\n\r\n    return dateFormatted;\r\n  };\r\n\r\n  const getPercentage = () => {\r\n    let totalProgressMade = props.progress - props.itemMin;\r\n    let totalProgressPossible = props.itemMax - props.itemMin;\r\n\r\n    if (\r\n      totalProgressPossible === 0 ||\r\n      props.progress === null ||\r\n      props.itemMax === null ||\r\n      props.itemMin === null\r\n    ) {\r\n      // wait when data is loading\r\n      return 0;\r\n    }\r\n\r\n    return 100 * (totalProgressMade / totalProgressPossible);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={(event) => event.preventDefault()}>\r\n      <input\r\n        style={{ width: `2.7em` }}\r\n        type=\"number\"\r\n        className={styles.items}\r\n        min=\"0\"\r\n        step=\"1\"\r\n        onChange={props.onMinChange}\r\n        value={props.itemMin}\r\n        disabled={props.timerID.current}\r\n      />\r\n      <input\r\n        className={styles.items}\r\n        style={{ width: `2.7em` }}\r\n        type=\"number\"\r\n        onChange={(event) => {\r\n          props.onCurrentChange(event);\r\n          progressHandler(event);\r\n        }}\r\n        min=\"0\"\r\n        step=\"1\"\r\n        value={props.progress}\r\n        disabled={props.timerID.current !== false}\r\n      />\r\n      <input\r\n        className={styles.items}\r\n        style={{ width: `2.7em` }}\r\n        type=\"number\"\r\n        onChange={props.onMaxChange}\r\n        value={props.itemMax}\r\n        min=\"0\"\r\n        step=\"1\"\r\n        disabled={props.timerID.current}\r\n      />\r\n\r\n      <br />\r\n      <br />\r\n      <Timer\r\n        value={props.time}\r\n        onTick={() => {\r\n          inputRef.current.focus();\r\n          props.onTick();\r\n        }}\r\n        timerID={props.timerID}\r\n        modifyTimerID={props.setTimerID}\r\n        // onStart={useFocus}\r\n      />\r\n      <button\r\n        autofocus=\"true\"\r\n        ref={inputRef}\r\n        onClick={() => {\r\n          props.onCurrentChange({ target: { value: props.progress + 1 } });\r\n          progressHandler({ target: { value: props.progress + 1 } });\r\n        }}\r\n        type=\"submit\"\r\n        disabled={+props.progress === +props.itemMax}\r\n      >\r\n        ⬆️\r\n      </button>\r\n      <span\r\n\r\n      // style={{\r\n      //   color: props.timerID.current\r\n      //     ? getPercentage() < 100\r\n      //       ? getPercentage() < 50\r\n      //         ? \"rgb(197, 52, 52)\"\r\n      //         : \"rgb(209, 135, 51)\"\r\n      //       : \"rgb(32, 189, 17)\"\r\n      //     : props.progress === props.itemMax && props.itemMax !== 0\r\n      //     ? \"rgb(32, 189, 17)\"\r\n      //     : \"rgb(255,255,255)\",\r\n      // }\r\n      >\r\n        <br />\r\n        <br />\r\n        <div style={{ fontSize: \"0.9em\" }}>\r\n          {beautify(props.time.current)}\r\n          {` ${props.timerID.current === false ? \"~\" : \"🔴\"} `}\r\n          {getETA()}\r\n        </div>\r\n      </span>\r\n      <br />\r\n      <div class={styles.progress}>\r\n        <div\r\n          className={styles[`progress-value`]}\r\n          style={{\r\n            width: getPercentage() + \"%\",\r\n            background:\r\n              getPercentage() < 100\r\n                ? getPercentage() < 50\r\n                  ? \"rgb(197, 52, 52)\"\r\n                  : \"rgb(209, 135, 51)\"\r\n                : \"rgb(32, 189, 17)\",\r\n          }}\r\n        >\r\n          <AnimatedCounter value={getPercentage()} />%\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ItemData;\r\n","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\Timer.js",["35"],"/*global chrome*/\r\nimport { useEffect } from \"react\";\r\nconst Timer = (props) => {\r\n  const tickHandler = () => {\r\n    props.onTick();\r\n  };\r\n\r\n  const startHandler = () => {\r\n    if (props.timerID.current === false) {\r\n      props.modifyTimerID(\r\n        setInterval(() => {\r\n          tickHandler();\r\n        }, 1000)\r\n      );\r\n      chrome.storage.sync.get([\"startedRecordingAt\", \"savedTime\"], (data) => {\r\n        if (data.startedRecordingAt === null && data.savedTime === null) {\r\n          chrome.storage.sync.set({\r\n            startedRecordingAt: Date.now(),\r\n          });\r\n        } else {\r\n          chrome.storage.sync.get([\"startedRecordingAt\"], (data) => {});\r\n\r\n          chrome.storage.sync.set({\r\n            startedRecordingAt: Date.now() - props.value.current * 1000,\r\n            savedTime: null,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const stopHandler = () => {\r\n    clearInterval(props.timerID.current);\r\n    props.modifyTimerID(false);\r\n\r\n    chrome.storage.sync.set({\r\n      startedRecordingAt: null,\r\n    });\r\n\r\n    chrome.storage.sync.set({\r\n      savedTime: props.value.current,\r\n    });\r\n  };\r\n\r\n  const resetHandler = () => {\r\n    stopHandler(); // pause time recording\r\n    props.onTick(true); // remove time recorded -> reset === true\r\n\r\n    chrome.storage.sync.set({\r\n      startedRecordingAt: null,\r\n      savedTime: null,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    chrome.storage.sync.get([\"startedRecordingAt\", \"savedTime\"], (data) => {\r\n      if (data.startedRecordingAt !== null && data.savedTime === null) {\r\n        startHandler();\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <span>\r\n      <button disabled={props.value.current < 1} onClick={resetHandler}>\r\n        ⏹️\r\n      </button>\r\n      <button disabled={!props.timerID.current} onClick={stopHandler}>\r\n        ⏸️\r\n      </button>\r\n      <button disabled={props.timerID.current} onClick={startHandler}>\r\n        ▶️\r\n      </button>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","C:\\Users\\97252\\Documents\\Projects\\river\\src\\components\\AnimatedCounter.js",["36"],"import react from \"react\";\r\nimport { useState, useRef } from \"react\";\r\n\r\nconst AnimatedCounter = (props) => {\r\n  const [getOldValue, setOldValue] = useState(0); //useState(props.value);\r\n  const [timerID, setTimerID] = useState(false);\r\n  let oldValue = useRef();\r\n  oldValue.current = getOldValue;\r\n  const delayInSeconds = 2;\r\n  const refreshPerSecond =\r\n    props.refreshRate === undefined ? 25 : props.refreshRate; // default refresh rate is 25 Hz\r\n  const sign = (number) => (number < 0 ? -1 : 1);\r\n\r\n  const executeTick = (oldVal, incSize) => {\r\n    if (\r\n      (+oldVal + +incSize) * sign(+incSize) >=\r\n      +props.value * sign(+incSize)\r\n    ) {\r\n      // we've finished incrementing, let's reset the timer and oldValue\r\n      setOldValue(props.value);\r\n\r\n      clearTimeout(timerID);\r\n      setTimerID(false);\r\n    } else {\r\n      setOldValue(oldVal + incSize);\r\n\r\n      setTimerID(\r\n        setTimeout(\r\n          () => executeTick(oldVal + incSize, incSize),\r\n          1000 * (1 / refreshPerSecond)\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  let expression;\r\n  if (+oldValue.current !== +props.value && !timerID) {\r\n    // we get new value, set up increment\r\n    let tempInc =\r\n      (+props.value - +oldValue.current) / (delayInSeconds * refreshPerSecond);\r\n    tempInc = props.inc === undefined ? tempInc : props.inc * sign(tempInc);\r\n    // set minimum increment, if defined\r\n    setTimerID(\r\n      setTimeout(\r\n        () => executeTick(oldValue.current + tempInc, tempInc),\r\n        1000 * (1 / refreshPerSecond)\r\n      )\r\n    );\r\n\r\n    expression = Math.floor(100 * (oldValue.current + tempInc)) / 100;\r\n    return props.callback === undefined\r\n      ? expression\r\n      : props.callback(expression);\r\n    // run the callback on expression if defined\r\n  }\r\n\r\n  expression = Math.floor(100 * oldValue.current) / 100;\r\n  return props.callback === undefined ? expression : props.callback(expression);\r\n};\r\n\r\nexport default AnimatedCounter;\r\n",{"ruleId":"37","severity":1,"message":"38","line":4,"column":8,"nodeType":"39","messageId":"40","endLine":4,"endColumn":13},{"ruleId":"37","severity":1,"message":"41","line":5,"column":8,"nodeType":"39","messageId":"40","endLine":5,"endColumn":13},{"ruleId":"42","severity":1,"message":"43","line":79,"column":11,"nodeType":"44","endLine":79,"endColumn":35},{"ruleId":"37","severity":1,"message":"45","line":5,"column":18,"nodeType":"39","messageId":"40","endLine":5,"endColumn":27},{"ruleId":"46","severity":1,"message":"47","line":47,"column":48,"nodeType":"48","messageId":"49","endLine":47,"endColumn":50},{"ruleId":"50","severity":1,"message":"51","line":61,"column":6,"nodeType":"52","endLine":61,"endColumn":8,"suggestions":"53"},{"ruleId":"37","severity":1,"message":"41","line":1,"column":8,"nodeType":"39","messageId":"40","endLine":1,"endColumn":13},"no-unused-vars","'Timer' is defined but never used.","Identifier","unusedVar","'react' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'startHandler'. Either include it or remove the dependency array.","ArrayExpression",["54"],{"desc":"55","fix":"56"},"Update the dependencies array to be: [startHandler]",{"range":"57","text":"58"},[1612,1614],"[startHandler]"]
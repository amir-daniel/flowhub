{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\97252\\\\Documents\\\\Projects\\\\river\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import react from\"react\";import{useState}from\"react\";var AnimatedCounter=function AnimatedCounter(props){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),oldValue=_useState2[0],setOldValue=_useState2[1];//useState(props.value);\nvar _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),timerID=_useState4[0],setTimerID=_useState4[1];var delayInSeconds=2;var refreshPerSecond=props.refreshRate===undefined?25:props.refreshRate;// default refresh rate is 25 Hz\nvar sign=function sign(number){return number<0?-1:1;};var executeTick=function executeTick(oldVal,incSize){if((+oldVal+ +incSize)*sign(+incSize)>=+props.value*sign(+incSize)){// we've finished incrementing, let's reset the timer and oldValue\nsetOldValue(props.value);clearTimeout(timerID);setTimerID(false);}else{setOldValue(oldVal+incSize);setTimerID(setTimeout(function(){return executeTick(oldVal+incSize,incSize);},1000*(1/refreshPerSecond)));}};if(+oldValue!==+props.value&&!timerID){// we get new value, set up increment\nvar tempInc=(+props.value-+oldValue)/(delayInSeconds*refreshPerSecond);tempInc=props.inc===undefined?tempInc:props.inc;// set minimum increment, if defined\nsetTimerID(setTimeout(function(){return executeTick(oldValue+tempInc,tempInc);},1000*(1/refreshPerSecond)));var expression=Math.floor(100*(oldValue+tempInc))/100;return props.callback===undefined?expression:props.callback(expression);// run the callback on expression if defined\n}return Math.floor(100*oldValue)/100;};export default AnimatedCounter;","map":{"version":3,"sources":["C:/Users/97252/Documents/Projects/river/src/components/AnimatedCounter.js"],"names":["react","useState","AnimatedCounter","props","oldValue","setOldValue","timerID","setTimerID","delayInSeconds","refreshPerSecond","refreshRate","undefined","sign","number","executeTick","oldVal","incSize","value","clearTimeout","setTimeout","tempInc","inc","expression","Math","floor","callback"],"mappings":"wIAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,QAAT,KAAyB,OAAzB,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAW,CACjC,cAAgCF,QAAQ,CAAC,CAAD,CAAxC,wCAAOG,QAAP,eAAiBC,WAAjB,eAA6C;AAC7C,eAA8BJ,QAAQ,CAAC,KAAD,CAAtC,yCAAOK,OAAP,eAAgBC,UAAhB,eAEA,GAAMC,CAAAA,cAAc,CAAG,CAAvB,CACA,GAAMC,CAAAA,gBAAgB,CACpBN,KAAK,CAACO,WAAN,GAAsBC,SAAtB,CAAkC,EAAlC,CAAuCR,KAAK,CAACO,WAD/C,CAC4D;AAC5D,GAAME,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAACC,MAAD,QAAaA,CAAAA,MAAM,CAAG,CAAT,CAAa,CAAC,CAAd,CAAkB,CAA/B,EAAb,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,MAAD,CAASC,OAAT,CAAqB,CACvC,GACE,CAAC,CAACD,MAAD,CAAU,EAACC,OAAZ,EAAuBJ,IAAI,CAAC,CAACI,OAAF,CAA3B,EACA,CAACb,KAAK,CAACc,KAAP,CAAeL,IAAI,CAAC,CAACI,OAAF,CAFrB,CAGE,CACA;AACAX,WAAW,CAACF,KAAK,CAACc,KAAP,CAAX,CAEAC,YAAY,CAACZ,OAAD,CAAZ,CACAC,UAAU,CAAC,KAAD,CAAV,CACD,CATD,IASO,CACLF,WAAW,CAACU,MAAM,CAAGC,OAAV,CAAX,CAEAT,UAAU,CACRY,UAAU,CACR,iBAAML,CAAAA,WAAW,CAACC,MAAM,CAAGC,OAAV,CAAmBA,OAAnB,CAAjB,EADQ,CAER,MAAQ,EAAIP,gBAAZ,CAFQ,CADF,CAAV,CAMD,CACF,CApBD,CAsBA,GAAI,CAACL,QAAD,GAAc,CAACD,KAAK,CAACc,KAArB,EAA8B,CAACX,OAAnC,CAA4C,CAC1C;AACA,GAAIc,CAAAA,OAAO,CACT,CAAC,CAACjB,KAAK,CAACc,KAAP,CAAe,CAACb,QAAjB,GAA8BI,cAAc,CAAGC,gBAA/C,CADF,CAEAW,OAAO,CAAGjB,KAAK,CAACkB,GAAN,GAAcV,SAAd,CAA0BS,OAA1B,CAAoCjB,KAAK,CAACkB,GAApD,CACA;AACAd,UAAU,CACRY,UAAU,CACR,iBAAML,CAAAA,WAAW,CAACV,QAAQ,CAAGgB,OAAZ,CAAqBA,OAArB,CAAjB,EADQ,CAER,MAAQ,EAAIX,gBAAZ,CAFQ,CADF,CAAV,CAOA,GAAIa,CAAAA,UAAU,CAAGC,IAAI,CAACC,KAAL,CAAW,KAAOpB,QAAQ,CAAGgB,OAAlB,CAAX,EAAyC,GAA1D,CACA,MAAOjB,CAAAA,KAAK,CAACsB,QAAN,GAAmBd,SAAnB,CACHW,UADG,CAEHnB,KAAK,CAACsB,QAAN,CAAeH,UAAf,CAFJ,CAGA;AACD,CAED,MAAOC,CAAAA,IAAI,CAACC,KAAL,CAAW,IAAMpB,QAAjB,EAA6B,GAApC,CACD,CApDD,CAsDA,cAAeF,CAAAA,eAAf","sourcesContent":["import react from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nconst AnimatedCounter = (props) => {\r\n  const [oldValue, setOldValue] = useState(0); //useState(props.value);\r\n  const [timerID, setTimerID] = useState(false);\r\n\r\n  const delayInSeconds = 2;\r\n  const refreshPerSecond =\r\n    props.refreshRate === undefined ? 25 : props.refreshRate; // default refresh rate is 25 Hz\r\n  const sign = (number) => (number < 0 ? -1 : 1);\r\n\r\n  const executeTick = (oldVal, incSize) => {\r\n    if (\r\n      (+oldVal + +incSize) * sign(+incSize) >=\r\n      +props.value * sign(+incSize)\r\n    ) {\r\n      // we've finished incrementing, let's reset the timer and oldValue\r\n      setOldValue(props.value);\r\n\r\n      clearTimeout(timerID);\r\n      setTimerID(false);\r\n    } else {\r\n      setOldValue(oldVal + incSize);\r\n\r\n      setTimerID(\r\n        setTimeout(\r\n          () => executeTick(oldVal + incSize, incSize),\r\n          1000 * (1 / refreshPerSecond)\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  if (+oldValue !== +props.value && !timerID) {\r\n    // we get new value, set up increment\r\n    let tempInc =\r\n      (+props.value - +oldValue) / (delayInSeconds * refreshPerSecond);\r\n    tempInc = props.inc === undefined ? tempInc : props.inc;\r\n    // set minimum increment, if defined\r\n    setTimerID(\r\n      setTimeout(\r\n        () => executeTick(oldValue + tempInc, tempInc),\r\n        1000 * (1 / refreshPerSecond)\r\n      )\r\n    );\r\n\r\n    let expression = Math.floor(100 * (oldValue + tempInc)) / 100;\r\n    return props.callback === undefined\r\n      ? expression\r\n      : props.callback(expression);\r\n    // run the callback on expression if defined\r\n  }\r\n\r\n  return Math.floor(100 * oldValue) / 100;\r\n};\r\n\r\nexport default AnimatedCounter;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport react from \"react\";\nimport { useState } from \"react\";\n\nconst AnimatedCounter = props => {\n  _s();\n\n  const [oldValue, setOldValue] = useState(props.value);\n  const [incrementSize, setIncrementSize] = useState(0);\n\n  if (incrementSize !== 0) {\n    if (+oldValue == +props.value) {\n      // cancel increment\n      d;\n    }\n  } else {\n    if (+oldValue !== +props.value) {// we get new value, set up increment\n    }\n  }\n\n  return props.value;\n}; //   const tickHandler = async (oldVal, newVal) => {\n//     const delayInSeconds = 3;\n//     const Herz = 25;\n//     const incrementSize = (newVal - oldVal) / (delayInSeconds * Herz);\n//     // for (let i = 1; i < delayInSeconds * Herz; i++) {\n//     //   await setTimeout(\n//     //     () => setOldValue(oldVal + i * incrementSize),\n//     //     1000 / Herz\n//     //   );\n//     // }\n//     // await setTimeout(() => setOldValue(newVal), 1000 / Herz);\n//   };\n\n\n_s(AnimatedCounter, \"Dv8INInNypk4kxxJ+FWCQFXJtWI=\");\n\n_c = AnimatedCounter;\nexport default AnimatedCounter;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnimatedCounter\");","map":{"version":3,"sources":["C:/Users/97252/Documents/Projects/river/src/components/AnimatedCounter.js"],"names":["react","useState","AnimatedCounter","props","oldValue","setOldValue","value","incrementSize","setIncrementSize","d"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAAA;;AACjC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAACE,KAAK,CAACG,KAAP,CAAxC;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,CAAD,CAAlD;;AAEA,MAAIM,aAAa,KAAK,CAAtB,EAAyB;AACvB,QAAI,CAACH,QAAD,IAAa,CAACD,KAAK,CAACG,KAAxB,EAA+B;AAC7B;AACAG,MAAAA,CAAC;AACF;AACF,GALD,MAKO;AACL,QAAI,CAACL,QAAD,KAAc,CAACD,KAAK,CAACG,KAAzB,EAAgC,CAC9B;AACD;AACF;;AAED,SAAOH,KAAK,CAACG,KAAb;AACD,CAhBD,C,CAkBA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GA/BMJ,e;;KAAAA,e;AAiCN,eAAeA,eAAf","sourcesContent":["import react from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nconst AnimatedCounter = (props) => {\r\n  const [oldValue, setOldValue] = useState(props.value);\r\n  const [incrementSize, setIncrementSize] = useState(0);\r\n\r\n  if (incrementSize !== 0) {\r\n    if (+oldValue == +props.value) {\r\n      // cancel increment\r\n      d;\r\n    }\r\n  } else {\r\n    if (+oldValue !== +props.value) {\r\n      // we get new value, set up increment\r\n    }\r\n  }\r\n\r\n  return props.value;\r\n};\r\n\r\n//   const tickHandler = async (oldVal, newVal) => {\r\n//     const delayInSeconds = 3;\r\n\r\n//     const Herz = 25;\r\n//     const incrementSize = (newVal - oldVal) / (delayInSeconds * Herz);\r\n\r\n//     // for (let i = 1; i < delayInSeconds * Herz; i++) {\r\n//     //   await setTimeout(\r\n//     //     () => setOldValue(oldVal + i * incrementSize),\r\n//     //     1000 / Herz\r\n//     //   );\r\n//     // }\r\n//     // await setTimeout(() => setOldValue(newVal), 1000 / Herz);\r\n//   };\r\n\r\nexport default AnimatedCounter;\r\n"]},"metadata":{},"sourceType":"module"}
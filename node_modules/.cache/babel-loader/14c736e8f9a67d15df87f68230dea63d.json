{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport react from \"react\";\nimport { useState } from \"react\";\n\nconst AnimatedCounter = props => {\n  _s();\n\n  const [oldValue, setOldValue] = useState(props.value);\n\n  const tickHandler = async (oldVal, newVal) => {\n    const delayInSeconds = 3;\n    const Herz = 25;\n    const incrementSize = (newVal - oldVal) / (delayInSeconds * Hz);\n\n    for (let i = 1; i < delayInSeconds * Hz; i++) {\n      await setTimeout(() => setOldValue(oldVal + i * incrementSize), 1000 / Hz);\n    }\n\n    await setTimeout(() => setOldValue(newVal), 1000 / Hz);\n  };\n\n  if (+oldValue !== +props.value) {\n    tickHandler(oldValue, props.value);\n  }\n\n  return oldValue;\n};\n\n_s(AnimatedCounter, \"x0ICn2NqEWCvCNK9kNu2uiL+Ogs=\");\n\n_c = AnimatedCounter;\nexport default AnimatedCounter;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnimatedCounter\");","map":{"version":3,"sources":["C:/Users/97252/Documents/Projects/river/src/components/AnimatedCounter.js"],"names":["react","useState","AnimatedCounter","props","oldValue","setOldValue","value","tickHandler","oldVal","newVal","delayInSeconds","Herz","incrementSize","Hz","i","setTimeout"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAAA;;AACjC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAACE,KAAK,CAACG,KAAP,CAAxC;;AAEA,QAAMC,WAAW,GAAG,OAAOC,MAAP,EAAeC,MAAf,KAA0B;AAC5C,UAAMC,cAAc,GAAG,CAAvB;AAEA,UAAMC,IAAI,GAAG,EAAb;AACA,UAAMC,aAAa,GAAG,CAACH,MAAM,GAAGD,MAAV,KAAqBE,cAAc,GAAGG,EAAtC,CAAtB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,cAAc,GAAGG,EAArC,EAAyCC,CAAC,EAA1C,EAA8C;AAC5C,YAAMC,UAAU,CACd,MAAMV,WAAW,CAACG,MAAM,GAAGM,CAAC,GAAGF,aAAd,CADH,EAEd,OAAOC,EAFO,CAAhB;AAID;;AAED,UAAME,UAAU,CAAC,MAAMV,WAAW,CAACI,MAAD,CAAlB,EAA4B,OAAOI,EAAnC,CAAhB;AACD,GAdD;;AAgBA,MAAI,CAACT,QAAD,KAAc,CAACD,KAAK,CAACG,KAAzB,EAAgC;AAC9BC,IAAAA,WAAW,CAACH,QAAD,EAAWD,KAAK,CAACG,KAAjB,CAAX;AACD;;AACD,SAAOF,QAAP;AACD,CAvBD;;GAAMF,e;;KAAAA,e;AAyBN,eAAeA,eAAf","sourcesContent":["import react from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nconst AnimatedCounter = (props) => {\r\n  const [oldValue, setOldValue] = useState(props.value);\r\n\r\n  const tickHandler = async (oldVal, newVal) => {\r\n    const delayInSeconds = 3;\r\n\r\n    const Herz = 25;\r\n    const incrementSize = (newVal - oldVal) / (delayInSeconds * Hz);\r\n\r\n    for (let i = 1; i < delayInSeconds * Hz; i++) {\r\n      await setTimeout(\r\n        () => setOldValue(oldVal + i * incrementSize),\r\n        1000 / Hz\r\n      );\r\n    }\r\n\r\n    await setTimeout(() => setOldValue(newVal), 1000 / Hz);\r\n  };\r\n\r\n  if (+oldValue !== +props.value) {\r\n    tickHandler(oldValue, props.value);\r\n  }\r\n  return oldValue;\r\n};\r\n\r\nexport default AnimatedCounter;\r\n"]},"metadata":{},"sourceType":"module"}
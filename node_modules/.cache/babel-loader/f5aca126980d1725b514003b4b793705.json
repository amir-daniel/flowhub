{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport react from \"react\";\nimport { useState } from \"react\";\n\nconst AnimatedCounter = props => {\n  _s();\n\n  const [oldValue, setOldValue] = useState(0); //useState(props.value);\n\n  const [timerID, setTimerID] = useState(false);\n  alert(props.value);\n  const delayInSeconds = 2;\n  const refreshPerSecond = 25;\n\n  const sign = number => number < 0 ? -1 : 1;\n\n  const executeTick = (oldVal, incSize) => {\n    if ((+oldVal + +incSize) * sign(+incSize) >= +props.value * sign(+incSize)) {\n      // we've finished incrementing, let's reset the timer and oldValue\n      setOldValue(props.value);\n      clearTimeout(timerID);\n      setTimerID(false);\n    } else {\n      setOldValue(oldVal + incSize);\n      setTimerID(setTimeout(() => executeTick(oldVal + incSize, incSize), 1000 * (1 / refreshPerSecond)));\n    }\n  };\n\n  if (+oldValue !== +props.value && !timerID) {\n    // we get new value, set up increment\n    let tempInc = (+props.value - +oldValue) / (delayInSeconds * refreshPerSecond);\n    setTimerID(setTimeout(() => executeTick(oldValue + tempInc, tempInc), 1000 * (1 / refreshPerSecond)));\n    return Math.floor(100 * (oldValue + tempInc)) / 100;\n  }\n\n  return Math.floor(100 * oldValue) / 100 + \"%\";\n};\n\n_s(AnimatedCounter, \"wqLQrgsjoua6Bb4hicNSjqIqQUk=\");\n\n_c = AnimatedCounter;\nexport default AnimatedCounter;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnimatedCounter\");","map":{"version":3,"sources":["C:/Users/97252/Documents/Projects/river/src/components/AnimatedCounter.js"],"names":["react","useState","AnimatedCounter","props","oldValue","setOldValue","timerID","setTimerID","alert","value","delayInSeconds","refreshPerSecond","sign","number","executeTick","oldVal","incSize","clearTimeout","setTimeout","tempInc","Math","floor"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAAA;;AACjC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,CAAD,CAAxC,CADiC,CACY;;AAC7C,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,KAAD,CAAtC;AACAO,EAAAA,KAAK,CAACL,KAAK,CAACM,KAAP,CAAL;AACA,QAAMC,cAAc,GAAG,CAAvB;AACA,QAAMC,gBAAgB,GAAG,EAAzB;;AACA,QAAMC,IAAI,GAAIC,MAAD,IAAaA,MAAM,GAAG,CAAT,GAAa,CAAC,CAAd,GAAkB,CAA5C;;AAEA,QAAMC,WAAW,GAAG,CAACC,MAAD,EAASC,OAAT,KAAqB;AACvC,QACE,CAAC,CAACD,MAAD,GAAU,CAACC,OAAZ,IAAuBJ,IAAI,CAAC,CAACI,OAAF,CAA3B,IACA,CAACb,KAAK,CAACM,KAAP,GAAeG,IAAI,CAAC,CAACI,OAAF,CAFrB,EAGE;AACA;AACAX,MAAAA,WAAW,CAACF,KAAK,CAACM,KAAP,CAAX;AAEAQ,MAAAA,YAAY,CAACX,OAAD,CAAZ;AACAC,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KATD,MASO;AACLF,MAAAA,WAAW,CAACU,MAAM,GAAGC,OAAV,CAAX;AAEAT,MAAAA,UAAU,CACRW,UAAU,CACR,MAAMJ,WAAW,CAACC,MAAM,GAAGC,OAAV,EAAmBA,OAAnB,CADT,EAER,QAAQ,IAAIL,gBAAZ,CAFQ,CADF,CAAV;AAMD;AACF,GApBD;;AAsBA,MAAI,CAACP,QAAD,KAAc,CAACD,KAAK,CAACM,KAArB,IAA8B,CAACH,OAAnC,EAA4C;AAC1C;AACA,QAAIa,OAAO,GACT,CAAC,CAAChB,KAAK,CAACM,KAAP,GAAe,CAACL,QAAjB,KAA8BM,cAAc,GAAGC,gBAA/C,CADF;AAEAJ,IAAAA,UAAU,CACRW,UAAU,CACR,MAAMJ,WAAW,CAACV,QAAQ,GAAGe,OAAZ,EAAqBA,OAArB,CADT,EAER,QAAQ,IAAIR,gBAAZ,CAFQ,CADF,CAAV;AAMA,WAAOS,IAAI,CAACC,KAAL,CAAW,OAAOjB,QAAQ,GAAGe,OAAlB,CAAX,IAAyC,GAAhD;AACD;;AAED,SAAOC,IAAI,CAACC,KAAL,CAAW,MAAMjB,QAAjB,IAA6B,GAA7B,GAAmC,GAA1C;AACD,CA5CD;;GAAMF,e;;KAAAA,e;AA8CN,eAAeA,eAAf","sourcesContent":["import react from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nconst AnimatedCounter = (props) => {\r\n  const [oldValue, setOldValue] = useState(0); //useState(props.value);\r\n  const [timerID, setTimerID] = useState(false);\r\n  alert(props.value);\r\n  const delayInSeconds = 2;\r\n  const refreshPerSecond = 25;\r\n  const sign = (number) => (number < 0 ? -1 : 1);\r\n\r\n  const executeTick = (oldVal, incSize) => {\r\n    if (\r\n      (+oldVal + +incSize) * sign(+incSize) >=\r\n      +props.value * sign(+incSize)\r\n    ) {\r\n      // we've finished incrementing, let's reset the timer and oldValue\r\n      setOldValue(props.value);\r\n\r\n      clearTimeout(timerID);\r\n      setTimerID(false);\r\n    } else {\r\n      setOldValue(oldVal + incSize);\r\n\r\n      setTimerID(\r\n        setTimeout(\r\n          () => executeTick(oldVal + incSize, incSize),\r\n          1000 * (1 / refreshPerSecond)\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  if (+oldValue !== +props.value && !timerID) {\r\n    // we get new value, set up increment\r\n    let tempInc =\r\n      (+props.value - +oldValue) / (delayInSeconds * refreshPerSecond);\r\n    setTimerID(\r\n      setTimeout(\r\n        () => executeTick(oldValue + tempInc, tempInc),\r\n        1000 * (1 / refreshPerSecond)\r\n      )\r\n    );\r\n    return Math.floor(100 * (oldValue + tempInc)) / 100;\r\n  }\r\n\r\n  return Math.floor(100 * oldValue) / 100 + \"%\";\r\n};\r\n\r\nexport default AnimatedCounter;\r\n"]},"metadata":{},"sourceType":"module"}
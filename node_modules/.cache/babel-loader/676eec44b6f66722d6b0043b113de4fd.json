{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\97252\\\\Documents\\\\Projects\\\\river\\\\src\\\\components\\\\Timer.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/*global chrome*/\nconst Timer = props => {\n  const tickHandler = () => {\n    props.onTick();\n    alert(\"another one\");\n    props.setTimerID(setTimeout(() => {\n      tickHandler();\n    }, 1000));\n  };\n\n  const startHandler = () => {\n    if (!props.timerID) {\n      chrome.storage.sync.get([\"startedRecordingAt\"], data => {\n        if (data.startedRecordingAt === null) {\n          chrome.storage.sync.set({\n            startedRecordingAt: Date.now(),\n            savedTime: null\n          });\n        } else {\n          chrome.storage.sync.set({\n            startedRecordingAt: Date.now() - props.value * 1000,\n            savedTime: null\n          });\n        }\n      }); // chrome.storage.sync.set({\n      //   isTimerOn: true,\n      // });\n\n      props.setTimerID(setTimeout(() => {\n        tickHandler();\n      }, 1000));\n    }\n  };\n\n  const stopHandler = () => {\n    clearTimeout(props.timerID);\n    props.setTimerID(false);\n    chrome.storage.sync.set({\n      startedRecordingAt: null,\n      savedTime: props.value\n    });\n    alert(props.timerID); // chrome.storage.sync.set({\n    //   isTimerOn: false,\n    // });\n  };\n\n  const resetHandler = () => {\n    stopHandler(); // pause time recording\n\n    props.onTick(true); // remove time recorded, reset = true\n\n    chrome.storage.sync.set({\n      startedRecordingAt: null,\n      savedTime: null\n    });\n  };\n\n  if (props.value > 0) {\n    if (!props.timerID) {\n      startHandler();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: props.value < 1,\n      onClick: resetHandler,\n      children: \"\\u23F9\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: !props.timerID,\n      onClick: stopHandler,\n      children: \"\\u23F8\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: props.timerID,\n      onClick: startHandler,\n      children: \"\\u25B6\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["C:/Users/97252/Documents/Projects/river/src/components/Timer.js"],"names":["Timer","props","tickHandler","onTick","alert","setTimerID","setTimeout","startHandler","timerID","chrome","storage","sync","get","data","startedRecordingAt","set","Date","now","savedTime","value","stopHandler","clearTimeout","resetHandler"],"mappings":"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","sourcesContent":["/*global chrome*/\r\n\r\nconst Timer = (props) => {\r\n  const tickHandler = () => {\r\n    props.onTick();\r\n    alert(\"another one\");\r\n    props.setTimerID(\r\n      setTimeout(() => {\r\n        tickHandler();\r\n      }, 1000)\r\n    );\r\n  };\r\n\r\n  const startHandler = () => {\r\n    if (!props.timerID) {\r\n      chrome.storage.sync.get([\"startedRecordingAt\"], (data) => {\r\n        if (data.startedRecordingAt === null) {\r\n          chrome.storage.sync.set({\r\n            startedRecordingAt: Date.now(),\r\n            savedTime: null,\r\n          });\r\n        } else {\r\n          chrome.storage.sync.set({\r\n            startedRecordingAt: Date.now() - props.value * 1000,\r\n            savedTime: null,\r\n          });\r\n        }\r\n      });\r\n\r\n      // chrome.storage.sync.set({\r\n      //   isTimerOn: true,\r\n      // });\r\n\r\n      props.setTimerID(\r\n        setTimeout(() => {\r\n          tickHandler();\r\n        }, 1000)\r\n      );\r\n    }\r\n  };\r\n\r\n  const stopHandler = () => {\r\n    clearTimeout(props.timerID);\r\n    props.setTimerID(false);\r\n\r\n    chrome.storage.sync.set({\r\n      startedRecordingAt: null,\r\n      savedTime: props.value,\r\n    });\r\n    alert(props.timerID);\r\n\r\n    // chrome.storage.sync.set({\r\n    //   isTimerOn: false,\r\n    // });\r\n  };\r\n\r\n  const resetHandler = () => {\r\n    stopHandler(); // pause time recording\r\n    props.onTick(true); // remove time recorded, reset = true\r\n    chrome.storage.sync.set({\r\n      startedRecordingAt: null,\r\n      savedTime: null,\r\n    });\r\n  };\r\n\r\n  if (props.value > 0) {\r\n    if (!props.timerID) {\r\n      startHandler();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button disabled={props.value < 1} onClick={resetHandler}>\r\n        ⏹️\r\n      </button>\r\n      <button disabled={!props.timerID} onClick={stopHandler}>\r\n        ⏸️\r\n      </button>\r\n      <button disabled={props.timerID} onClick={startHandler}>\r\n        ▶️\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n"]},"metadata":{},"sourceType":"module"}
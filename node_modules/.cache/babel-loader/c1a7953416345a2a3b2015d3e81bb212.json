{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\97252\\\\Documents\\\\Projects\\\\river\\\\src\\\\components\\\\NumberInput.js\",\n    _s = $RefreshSig$();\n\n/*global chrome*/\nimport \"./ItemData.css\";\nimport AnimatedCounter from \"./AnimatedCounter\";\nimport Timer from \"./Timer.js\";\nimport { useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst playFile = filepath => {\n  var audioPlayer = new Audio(chrome.runtime.getURL(filepath));\n  audioPlayer.play();\n};\n\nconst designDigit = num => +num < 10 ? \"0\" + num : num;\n\nconst destructureSeconds = time => {\n  time = Math.floor(time); // round time received in seconds\n\n  let sec = designDigit(time % 60);\n  let min = designDigit((time - sec) / 60 % 60);\n  let hr = (time - sec - 60 * min) / 3600;\n  return [hr, min, sec];\n};\n\nconst beautify = time => {\n  let [hr, min, sec] = destructureSeconds(time);\n  return `${hr}h${min}m${sec}s`;\n};\n\nconst NumberInput = props => {\n  _s();\n\n  const inputRef = useRef(null);\n\n  const progressHandler = event => {\n    if (+props.itemMax === +event.target.value) {\n      playFile(\"sounds/complete.mp3\");\n      return;\n    }\n\n    playFile(\"sounds/increment.mp3\");\n  };\n\n  const getETA = () => {\n    let totalProgress = props.progress - props.itemMin;\n    let progressLeft = props.itemMax - props.progress;\n    let totalMins = props.time.current / 60;\n\n    if (!props.timerID.current & (props.progress === props.itemMin || props.itemMax !== props.progress || props.progress === null || // these 3 nulls are to wait for the data to load\n    props.itemMax === null || props.itemMin === null)) {\n      return \"\";\n    }\n\n    if (props.timerID.current && (props.time.current < 1 || totalProgress === 0)) {\n      return \" ∞\";\n    }\n\n    if (progressLeft === 0) {\n      if (props.timerID.current) {\n        // probably redundant since button disabled, remove in the future\n        clearInterval(props.timerID.current);\n        props.setTimerID(false);\n        chrome.storage.sync.set({\n          // does it even go into effect?\n          startedRecordingAt: null,\n          savedTime: props.time.current\n        });\n      }\n\n      return \" ✅\";\n    }\n\n    let paceInMins = totalProgress / totalMins;\n    let minsPerItem = 1 / paceInMins;\n    let minsLeft = minsPerItem * progressLeft;\n    let millisecondsLeft = minsLeft * 60 * 1000;\n    let ETADate = props.itemMin === null || props.progress === null || props.itemMax === null ? 0 : new Date(Date.now() + millisecondsLeft);\n\n    let dateFormatted = /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(AnimatedCounter, {\n        value: ETADate === 0 ? 0 : ETADate.getHours(),\n        inc: 1,\n        refreshRate: 24,\n        callback: designDigit\n      }, \"h\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), \":\", /*#__PURE__*/_jsxDEV(AnimatedCounter, {\n        value: ETADate === 0 ? 0 : ETADate.getMinutes(),\n        inc: 1,\n        refreshRate: 8,\n        callback: designDigit\n      }, \"m\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n\n    return dateFormatted;\n  };\n\n  const getPercentage = () => {\n    let totalProgressMade = props.progress - props.itemMin;\n    let totalProgressPossible = props.itemMax - props.itemMin;\n\n    if (totalProgressPossible === 0 || props.progress === null || props.itemMax === null || props.itemMin === null) {\n      // wait when data is loading\n      return 0;\n    }\n\n    return 100 * (totalProgressMade / totalProgressPossible);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: props.className,\n      placeholder: props.placeholder,\n      onChange: props.onChange,\n      value: props.itemMin,\n      disabled: props.timerID.current\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NumberInput, \"iD9XNNsNOlNDckBemnvlLS+aHYk=\");\n\n_c = NumberInput;\nexport default ItemData;\n\nvar _c;\n\n$RefreshReg$(_c, \"NumberInput\");","map":{"version":3,"sources":["C:/Users/97252/Documents/Projects/river/src/components/NumberInput.js"],"names":["AnimatedCounter","Timer","useRef","useEffect","playFile","filepath","audioPlayer","Audio","chrome","runtime","getURL","play","designDigit","num","destructureSeconds","time","Math","floor","sec","min","hr","beautify","NumberInput","props","inputRef","progressHandler","event","itemMax","target","value","getETA","totalProgress","progress","itemMin","progressLeft","totalMins","current","timerID","clearInterval","setTimerID","storage","sync","set","startedRecordingAt","savedTime","paceInMins","minsPerItem","minsLeft","millisecondsLeft","ETADate","Date","now","dateFormatted","getHours","getMinutes","getPercentage","totalProgressMade","totalProgressPossible","className","placeholder","onChange","ItemData"],"mappings":";;;AAAA;AACA,OAAO,gBAAP;AACA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;;;AAEA,MAAMC,QAAQ,GAAIC,QAAD,IAAc;AAC7B,MAAIC,WAAW,GAAG,IAAIC,KAAJ,CAAUC,MAAM,CAACC,OAAP,CAAeC,MAAf,CAAsBL,QAAtB,CAAV,CAAlB;AACAC,EAAAA,WAAW,CAACK,IAAZ;AACD,CAHD;;AAKA,MAAMC,WAAW,GAAIC,GAAD,IAAU,CAACA,GAAD,GAAO,EAAP,GAAY,MAAMA,GAAlB,GAAwBA,GAAtD;;AAEA,MAAMC,kBAAkB,GAAIC,IAAD,IAAU;AACnCA,EAAAA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAP,CADmC,CACV;;AAEzB,MAAIG,GAAG,GAAGN,WAAW,CAACG,IAAI,GAAG,EAAR,CAArB;AACA,MAAII,GAAG,GAAGP,WAAW,CAAE,CAACG,IAAI,GAAGG,GAAR,IAAe,EAAhB,GAAsB,EAAvB,CAArB;AACA,MAAIE,EAAE,GAAG,CAACL,IAAI,GAAGG,GAAP,GAAa,KAAKC,GAAnB,IAA0B,IAAnC;AAEA,SAAO,CAACC,EAAD,EAAKD,GAAL,EAAUD,GAAV,CAAP;AACD,CARD;;AAUA,MAAMG,QAAQ,GAAIN,IAAD,IAAU;AACzB,MAAI,CAACK,EAAD,EAAKD,GAAL,EAAUD,GAAV,IAAiBJ,kBAAkB,CAACC,IAAD,CAAvC;AAEA,SAAQ,GAAEK,EAAG,IAAGD,GAAI,IAAGD,GAAI,GAA3B;AACD,CAJD;;AAMA,MAAMI,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,QAAQ,GAAGtB,MAAM,CAAC,IAAD,CAAvB;;AAEA,QAAMuB,eAAe,GAAIC,KAAD,IAAW;AACjC,QAAI,CAACH,KAAK,CAACI,OAAP,KAAmB,CAACD,KAAK,CAACE,MAAN,CAAaC,KAArC,EAA4C;AAC1CzB,MAAAA,QAAQ,CAAC,qBAAD,CAAR;AACA;AACD;;AACDA,IAAAA,QAAQ,CAAC,sBAAD,CAAR;AACD,GAND;;AAQA,QAAM0B,MAAM,GAAG,MAAM;AACnB,QAAIC,aAAa,GAAGR,KAAK,CAACS,QAAN,GAAiBT,KAAK,CAACU,OAA3C;AACA,QAAIC,YAAY,GAAGX,KAAK,CAACI,OAAN,GAAgBJ,KAAK,CAACS,QAAzC;AACA,QAAIG,SAAS,GAAGZ,KAAK,CAACR,IAAN,CAAWqB,OAAX,GAAqB,EAArC;;AAEA,QACE,CAACb,KAAK,CAACc,OAAN,CAAcD,OAAf,IACCb,KAAK,CAACS,QAAN,KAAmBT,KAAK,CAACU,OAAzB,IACCV,KAAK,CAACI,OAAN,KAAkBJ,KAAK,CAACS,QADzB,IAECT,KAAK,CAACS,QAAN,KAAmB,IAFpB,IAE4B;AAC3BT,IAAAA,KAAK,CAACI,OAAN,KAAkB,IAHnB,IAICJ,KAAK,CAACU,OAAN,KAAkB,IALpB,CADF,EAOE;AACA,aAAO,EAAP;AACD;;AAED,QACEV,KAAK,CAACc,OAAN,CAAcD,OAAd,KACCb,KAAK,CAACR,IAAN,CAAWqB,OAAX,GAAqB,CAArB,IAA0BL,aAAa,KAAK,CAD7C,CADF,EAGE;AACA,aAAO,IAAP;AACD;;AAED,QAAIG,YAAY,KAAK,CAArB,EAAwB;AACtB,UAAIX,KAAK,CAACc,OAAN,CAAcD,OAAlB,EAA2B;AACzB;AACAE,QAAAA,aAAa,CAACf,KAAK,CAACc,OAAN,CAAcD,OAAf,CAAb;AACAb,QAAAA,KAAK,CAACgB,UAAN,CAAiB,KAAjB;AAEA/B,QAAAA,MAAM,CAACgC,OAAP,CAAeC,IAAf,CAAoBC,GAApB,CAAwB;AACtB;AACAC,UAAAA,kBAAkB,EAAE,IAFE;AAGtBC,UAAAA,SAAS,EAAErB,KAAK,CAACR,IAAN,CAAWqB;AAHA,SAAxB;AAKD;;AACD,aAAO,IAAP;AACD;;AAED,QAAIS,UAAU,GAAGd,aAAa,GAAGI,SAAjC;AACA,QAAIW,WAAW,GAAG,IAAID,UAAtB;AACA,QAAIE,QAAQ,GAAGD,WAAW,GAAGZ,YAA7B;AACA,QAAIc,gBAAgB,GAAGD,QAAQ,GAAG,EAAX,GAAgB,IAAvC;AACA,QAAIE,OAAO,GACT1B,KAAK,CAACU,OAAN,KAAkB,IAAlB,IACAV,KAAK,CAACS,QAAN,KAAmB,IADnB,IAEAT,KAAK,CAACI,OAAN,KAAkB,IAFlB,GAGI,CAHJ,GAII,IAAIuB,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAaH,gBAAtB,CALN;;AAMA,QAAII,aAAa,gBACf;AAAA,iBACG,GADH,eAEE,QAAC,eAAD;AAEE,QAAA,KAAK,EAAEH,OAAO,KAAK,CAAZ,GAAgB,CAAhB,GAAoBA,OAAO,CAACI,QAAR,EAF7B;AAGE,QAAA,GAAG,EAAE,CAHP;AAIE,QAAA,WAAW,EAAE,EAJf;AAKE,QAAA,QAAQ,EAAEzC;AALZ,SACO,GADP;AAAA;AAAA;AAAA;AAAA,cAFF,oBAUE,QAAC,eAAD;AAEE,QAAA,KAAK,EAAEqC,OAAO,KAAK,CAAZ,GAAgB,CAAhB,GAAoBA,OAAO,CAACK,UAAR,EAF7B;AAGE,QAAA,GAAG,EAAE,CAHP;AAIE,QAAA,WAAW,EAAE,CAJf;AAKE,QAAA,QAAQ,EAAE1C;AALZ,SACO,GADP;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;;AAqBA,WAAOwC,aAAP;AACD,GAtED;;AAwEA,QAAMG,aAAa,GAAG,MAAM;AAC1B,QAAIC,iBAAiB,GAAGjC,KAAK,CAACS,QAAN,GAAiBT,KAAK,CAACU,OAA/C;AACA,QAAIwB,qBAAqB,GAAGlC,KAAK,CAACI,OAAN,GAAgBJ,KAAK,CAACU,OAAlD;;AAEA,QACEwB,qBAAqB,KAAK,CAA1B,IACAlC,KAAK,CAACS,QAAN,KAAmB,IADnB,IAEAT,KAAK,CAACI,OAAN,KAAkB,IAFlB,IAGAJ,KAAK,CAACU,OAAN,KAAkB,IAJpB,EAKE;AACA;AACA,aAAO,CAAP;AACD;;AAED,WAAO,OAAOuB,iBAAiB,GAAGC,qBAA3B,CAAP;AACD,GAfD;;AAiBA,sBACE;AAAA,2BACE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,SAAS,EAAElC,KAAK,CAACmC,SAFnB;AAGE,MAAA,WAAW,EAAEnC,KAAK,CAACoC,WAHrB;AAIE,MAAA,QAAQ,EAAEpC,KAAK,CAACqC,QAJlB;AAKE,MAAA,KAAK,EAAErC,KAAK,CAACU,OALf;AAME,MAAA,QAAQ,EAAEV,KAAK,CAACc,OAAN,CAAcD;AAN1B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAhHD;;GAAMd,W;;KAAAA,W;AAkHN,eAAeuC,QAAf","sourcesContent":["/*global chrome*/\r\nimport \"./ItemData.css\";\r\nimport AnimatedCounter from \"./AnimatedCounter\";\r\nimport Timer from \"./Timer.js\";\r\nimport { useRef, useEffect } from \"react\";\r\n\r\nconst playFile = (filepath) => {\r\n  var audioPlayer = new Audio(chrome.runtime.getURL(filepath));\r\n  audioPlayer.play();\r\n};\r\n\r\nconst designDigit = (num) => (+num < 10 ? \"0\" + num : num);\r\n\r\nconst destructureSeconds = (time) => {\r\n  time = Math.floor(time); // round time received in seconds\r\n\r\n  let sec = designDigit(time % 60);\r\n  let min = designDigit(((time - sec) / 60) % 60);\r\n  let hr = (time - sec - 60 * min) / 3600;\r\n\r\n  return [hr, min, sec];\r\n};\r\n\r\nconst beautify = (time) => {\r\n  let [hr, min, sec] = destructureSeconds(time);\r\n\r\n  return `${hr}h${min}m${sec}s`;\r\n};\r\n\r\nconst NumberInput = (props) => {\r\n  const inputRef = useRef(null);\r\n\r\n  const progressHandler = (event) => {\r\n    if (+props.itemMax === +event.target.value) {\r\n      playFile(\"sounds/complete.mp3\");\r\n      return;\r\n    }\r\n    playFile(\"sounds/increment.mp3\");\r\n  };\r\n\r\n  const getETA = () => {\r\n    let totalProgress = props.progress - props.itemMin;\r\n    let progressLeft = props.itemMax - props.progress;\r\n    let totalMins = props.time.current / 60;\r\n\r\n    if (\r\n      !props.timerID.current &\r\n      (props.progress === props.itemMin ||\r\n        props.itemMax !== props.progress ||\r\n        props.progress === null || // these 3 nulls are to wait for the data to load\r\n        props.itemMax === null ||\r\n        props.itemMin === null)\r\n    ) {\r\n      return \"\";\r\n    }\r\n\r\n    if (\r\n      props.timerID.current &&\r\n      (props.time.current < 1 || totalProgress === 0)\r\n    ) {\r\n      return \" ∞\";\r\n    }\r\n\r\n    if (progressLeft === 0) {\r\n      if (props.timerID.current) {\r\n        // probably redundant since button disabled, remove in the future\r\n        clearInterval(props.timerID.current);\r\n        props.setTimerID(false);\r\n\r\n        chrome.storage.sync.set({\r\n          // does it even go into effect?\r\n          startedRecordingAt: null,\r\n          savedTime: props.time.current,\r\n        });\r\n      }\r\n      return \" ✅\";\r\n    }\r\n\r\n    let paceInMins = totalProgress / totalMins;\r\n    let minsPerItem = 1 / paceInMins;\r\n    let minsLeft = minsPerItem * progressLeft;\r\n    let millisecondsLeft = minsLeft * 60 * 1000;\r\n    let ETADate =\r\n      props.itemMin === null ||\r\n      props.progress === null ||\r\n      props.itemMax === null\r\n        ? 0\r\n        : new Date(Date.now() + millisecondsLeft);\r\n    let dateFormatted = (\r\n      <span>\r\n        {\" \"}\r\n        <AnimatedCounter\r\n          key={\"h\"}\r\n          value={ETADate === 0 ? 0 : ETADate.getHours()}\r\n          inc={1}\r\n          refreshRate={24}\r\n          callback={designDigit}\r\n        />\r\n        :\r\n        <AnimatedCounter\r\n          key={\"m\"}\r\n          value={ETADate === 0 ? 0 : ETADate.getMinutes()}\r\n          inc={1}\r\n          refreshRate={8}\r\n          callback={designDigit}\r\n        />\r\n      </span>\r\n    );\r\n\r\n    return dateFormatted;\r\n  };\r\n\r\n  const getPercentage = () => {\r\n    let totalProgressMade = props.progress - props.itemMin;\r\n    let totalProgressPossible = props.itemMax - props.itemMin;\r\n\r\n    if (\r\n      totalProgressPossible === 0 ||\r\n      props.progress === null ||\r\n      props.itemMax === null ||\r\n      props.itemMin === null\r\n    ) {\r\n      // wait when data is loading\r\n      return 0;\r\n    }\r\n\r\n    return 100 * (totalProgressMade / totalProgressPossible);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        className={props.className}\r\n        placeholder={props.placeholder}\r\n        onChange={props.onChange}\r\n        value={props.itemMin}\r\n        disabled={props.timerID.current}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemData;\r\n"]},"metadata":{},"sourceType":"module"}
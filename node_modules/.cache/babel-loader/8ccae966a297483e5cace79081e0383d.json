{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\97252\\\\Documents\\\\Projects\\\\river\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";/*global chrome*/import\"./App.css\";import ItemData from\"./components/ItemData\";import TextInput from\"./components/TextInput\";import Timer from\"./components/Timer\";import react from\"react\";import{useState,useEffect,useRef}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),time=_useState2[0],setTime=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),getStart=_useState4[0],setStart=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),getCurrent=_useState6[0],setCurrent=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),getEnd=_useState8[0],setEnd=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),TimersID=_useState10[0],setTimersID=_useState10[1];var getTime=useRef();var getTimersID=useRef();getTimersID.current=TimersID;getTime.current=time;useEffect(function(){chrome.storage.sync.get([\"startedRecordingAt\",\"savedTime\"],function(data){setTime(data.startedRecordingAt===null?data.savedTime===null?0:data.savedTime:(Date.now()-data.startedRecordingAt)/1000);});chrome.storage.sync.get([\"start\",\"progress\",\"end\"],function(data){setCurrent(data.progress);setEnd(data.end);setStart(data.start);});// chrome.storage.sync.get([\"isTimerOn\"], (data) => {\n//   setTimersID(data.isTimerOn);\n// });\n},[]);var changeHandler=function changeHandler(){setTime(getTime.current+1);//update progress values from storage\nchrome.storage.sync.get([\"progress\"],function(data){setCurrent(data.progress);});};var resetHandler=function resetHandler(){setTime(0);setStart(0);setCurrent(0);setEnd(0);chrome.storage.sync.set({start:0,progress:0,end:0});// if reset mode requested, reset timer!\n};var minHandler=function minHandler(event){if(+event.target.value<=getCurrent){setStart(+event.target.value);chrome.storage.sync.set({start:+event.target.value});}};var currentHandler=function currentHandler(event){if(+event.target.value>=getStart){if(+event.target.value<=getEnd){setCurrent(+event.target.value);chrome.storage.sync.set({progress:+event.target.value});}}};var maxHandler=function maxHandler(event){if(+event.target.value>=getCurrent){setEnd(+event.target.value);chrome.storage.sync.set({end:+event.target.value});}};return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsx(\"header\",{className:\"App-header\",children:/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){if(getTimersID.current!==false){alert(\"Can't proceed while timer is active.\");return;}var x=prompt(\"Enter amount of time to load in the following format: h:mm:ss\");var timeArr=x.split(\":\").reverse();if(timeArr.length!==3){alert(\"Invalid input! Too many or too few fields were input.\");return;}if(!Number.isInteger(+timeArr[0])||!Number.isInteger(+timeArr[1])||!Number.isInteger(+timeArr[2])){alert(\"Invalid input! All fields must be integers.\");return;}//All checks passed, now we're diving in to the addition.\nvar desiredTimeInSeconds=+timeArr[0]+ +timeArr[1]*60+ +timeArr[2]*3600+getTime.current;setTime(desiredTimeInSeconds);chrome.storage.sync.set({savedTime:desiredTimeInSeconds});},src:\"./logo.png\"}),/*#__PURE__*/_jsx(ItemData,{itemMin:getStart,itemMax:getEnd,progress:getCurrent,onMinChange:minHandler,onCurrentChange:currentHandler,onMaxChange:maxHandler,time:getTime,timerID:getTimersID,setTimerID:function setTimerID(id){setTimersID(id);},onTick:changeHandler,onReset:resetHandler}),/*#__PURE__*/_jsx(TextInput,{id:\"start\",placeholder:\"What's the starting point?\",text:\"Start\"})]})})});}export default App;","map":{"version":3,"sources":["C:/Users/97252/Documents/Projects/river/src/App.js"],"names":["ItemData","TextInput","Timer","react","useState","useEffect","useRef","App","time","setTime","getStart","setStart","getCurrent","setCurrent","getEnd","setEnd","TimersID","setTimersID","getTime","getTimersID","current","chrome","storage","sync","get","data","startedRecordingAt","savedTime","Date","now","progress","end","start","changeHandler","resetHandler","set","minHandler","event","target","value","currentHandler","maxHandler","alert","x","prompt","timeArr","split","reverse","length","Number","isInteger","desiredTimeInSeconds","id"],"mappings":"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","sourcesContent":["/*global chrome*/\nimport \"./App.css\";\nimport ItemData from \"./components/ItemData\";\nimport TextInput from \"./components/TextInput\";\nimport Timer from \"./components/Timer\";\nimport react from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\n\nfunction App() {\n  let [time, setTime] = useState(null);\n  let [getStart, setStart] = useState(null);\n  let [getCurrent, setCurrent] = useState(null);\n  let [getEnd, setEnd] = useState(null);\n  let [TimersID, setTimersID] = useState(false);\n  let getTime = useRef();\n  let getTimersID = useRef();\n\n  getTimersID.current = TimersID;\n  getTime.current = time;\n\n  useEffect(() => {\n    chrome.storage.sync.get([\"startedRecordingAt\", \"savedTime\"], (data) => {\n      setTime(\n        data.startedRecordingAt === null\n          ? data.savedTime === null\n            ? 0\n            : data.savedTime\n          : (Date.now() - data.startedRecordingAt) / 1000\n      );\n    });\n\n    chrome.storage.sync.get([\"start\", \"progress\", \"end\"], (data) => {\n      setCurrent(data.progress);\n      setEnd(data.end);\n      setStart(data.start);\n    });\n\n    // chrome.storage.sync.get([\"isTimerOn\"], (data) => {\n    //   setTimersID(data.isTimerOn);\n    // });\n  }, []);\n\n  const changeHandler = () => {\n    setTime(getTime.current + 1);\n    //update progress values from storage\n    chrome.storage.sync.get([\"progress\"], (data) => {\n      setCurrent(data.progress);\n    });\n  };\n\n  const resetHandler = () => {\n    setTime(0);\n    setStart(0);\n    setCurrent(0);\n    setEnd(0);\n    chrome.storage.sync.set({\n      start: 0,\n      progress: 0,\n      end: 0,\n    });\n    // if reset mode requested, reset timer!\n  };\n\n  const minHandler = (event) => {\n    if (+event.target.value <= getCurrent) {\n      setStart(+event.target.value);\n      chrome.storage.sync.set({ start: +event.target.value });\n    }\n  };\n  const currentHandler = (event) => {\n    if (+event.target.value >= getStart) {\n      if (+event.target.value <= getEnd) {\n        setCurrent(+event.target.value);\n        chrome.storage.sync.set({ progress: +event.target.value });\n      }\n    }\n  };\n  const maxHandler = (event) => {\n    if (+event.target.value >= getCurrent) {\n      setEnd(+event.target.value);\n      chrome.storage.sync.set({ end: +event.target.value });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          {/* <Timer\n            value={getTime}\n            onTick={changeHandler}\n            timerID={getTimersID}\n            modifyTimerID={(id) => {\n              setTimersID(id);\n            }}\n          /> */}\n          <img\n            onClick={() => {\n              if (getTimersID.current !== false) {\n                alert(\"Can't proceed while timer is active.\");\n                return;\n              }\n\n              let x = prompt(\n                \"Enter amount of time to load in the following format: h:mm:ss\"\n              );\n\n              let timeArr = x.split(\":\").reverse();\n\n              if (timeArr.length !== 3) {\n                alert(\"Invalid input! Too many or too few fields were input.\");\n                return;\n              }\n\n              if (\n                !Number.isInteger(+timeArr[0]) ||\n                !Number.isInteger(+timeArr[1]) ||\n                !Number.isInteger(+timeArr[2])\n              ) {\n                alert(\"Invalid input! All fields must be integers.\");\n                return;\n              }\n\n              //All checks passed, now we're diving in to the addition.\n\n              let desiredTimeInSeconds =\n                +timeArr[0] +\n                +timeArr[1] * 60 +\n                +timeArr[2] * 3600 +\n                getTime.current;\n\n              setTime(desiredTimeInSeconds);\n\n              chrome.storage.sync.set({\n                savedTime: desiredTimeInSeconds,\n              });\n            }}\n            src=\"./logo.png\"\n          />\n          <ItemData\n            itemMin={getStart}\n            itemMax={getEnd}\n            progress={getCurrent}\n            onMinChange={minHandler}\n            onCurrentChange={currentHandler}\n            onMaxChange={maxHandler}\n            time={getTime}\n            timerID={getTimersID}\n            setTimerID={(id) => {\n              setTimersID(id);\n            }}\n            onTick={changeHandler}\n            onReset={resetHandler}\n          />\n          <TextInput\n            id=\"start\"\n            placeholder=\"What's the starting point?\"\n            text=\"Start\"\n          />\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
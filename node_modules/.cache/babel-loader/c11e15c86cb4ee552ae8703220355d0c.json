{"ast":null,"code":"/*global chrome*/import{useEffect}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";var Timer=function Timer(props){var tickHandler=function tickHandler(){props.onTick();};var startHandler=function startHandler(){if(props.timerID===false){props.modifyTimerID(setInterval(function(){tickHandler();},1000));}};useEffect(function(){chrome.storage.sync.get([\"startedRecordingAt\",\"savedTime\"],function(data){if(data.startedRecordingAt!==null&&data.savedTime===null){startHandler();}});},[]);return/*#__PURE__*/_jsx(\"button\",{autoFocus:props.autoFocus,onClick:function onClick(){if(props.timerID===false){startHandler();}else{props.onPause();}},children:props.timerID===false?\"Record\":\"Pause\"});};export default Timer;","map":{"version":3,"sources":["C:/Users/97252/Documents/Projects/river/src/components/Timer.js"],"names":["useEffect","Timer","props","tickHandler","onTick","startHandler","timerID","modifyTimerID","setInterval","chrome","storage","sync","get","data","startedRecordingAt","savedTime","autoFocus","onPause"],"mappings":"AAAA,iBACA,OAASA,SAAT,KAA0B,OAA1B,C,2CAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,KAAD,CAAW,CACvB,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACxBD,KAAK,CAACE,MAAN,GACD,CAFD,CAIA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzB,GAAIH,KAAK,CAACI,OAAN,GAAkB,KAAtB,CAA6B,CAC3BJ,KAAK,CAACK,aAAN,CACEC,WAAW,CAAC,UAAM,CAChBL,WAAW,GACZ,CAFU,CAER,IAFQ,CADb,EAKD,CACF,CARD,CAUAH,SAAS,CAAC,UAAM,CACdS,MAAM,CAACC,OAAP,CAAeC,IAAf,CAAoBC,GAApB,CAAwB,CAAC,oBAAD,CAAuB,WAAvB,CAAxB,CAA6D,SAACC,IAAD,CAAU,CACrE,GAAIA,IAAI,CAACC,kBAAL,GAA4B,IAA5B,EAAoCD,IAAI,CAACE,SAAL,GAAmB,IAA3D,CAAiE,CAC/DV,YAAY,GACb,CACF,CAJD,EAKD,CANQ,CAMN,EANM,CAAT,CAQA,mBACE,eACE,SAAS,CAAEH,KAAK,CAACc,SADnB,CAEE,OAAO,CAAE,kBAAM,CACb,GAAId,KAAK,CAACI,OAAN,GAAkB,KAAtB,CAA6B,CAC3BD,YAAY,GACb,CAFD,IAEO,CACLH,KAAK,CAACe,OAAN,GACD,CACF,CARH,UAUGf,KAAK,CAACI,OAAN,GAAkB,KAAlB,CAA0B,QAA1B,CAAqC,OAVxC,EADF,CAcD,CArCD,CAuCA,cAAeL,CAAAA,KAAf","sourcesContent":["/*global chrome*/\r\nimport { useEffect } from \"react\";\r\n\r\nconst Timer = (props) => {\r\n  const tickHandler = () => {\r\n    props.onTick();\r\n  };\r\n\r\n  const startHandler = () => {\r\n    if (props.timerID === false) {\r\n      props.modifyTimerID(\r\n        setInterval(() => {\r\n          tickHandler();\r\n        }, 1000)\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    chrome.storage.sync.get([\"startedRecordingAt\", \"savedTime\"], (data) => {\r\n      if (data.startedRecordingAt !== null && data.savedTime === null) {\r\n        startHandler();\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <button\r\n      autoFocus={props.autoFocus}\r\n      onClick={() => {\r\n        if (props.timerID === false) {\r\n          startHandler();\r\n        } else {\r\n          props.onPause();\r\n        }\r\n      }}\r\n    >\r\n      {props.timerID === false ? \"Record\" : \"Pause\"}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n"]},"metadata":{},"sourceType":"module"}
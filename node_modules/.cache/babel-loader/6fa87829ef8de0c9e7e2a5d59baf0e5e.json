{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport react from \"react\";\nimport { useState } from \"react\";\n\nconst AnimatedCounter = props => {\n  _s();\n\n  const [oldValue, setOldValue] = useState(0); //useState(props.value);\n\n  const [incrementSize, setIncrementSize] = useState(0);\n  const [timerID, setTimerID] = useState(false);\n  const delayInSeconds = 3;\n  const refreshPerSecond = 3;\n\n  const sign = number => number < 0 ? -1 : 1;\n\n  const executeTick = incSize => {\n    setOldValue(oldValue + incrementSize); // alert(incrementSize);\n\n    if ((+oldValue + incrementSize) * sign(incrementSize) >= +props.value * sign(incrementSize) && incrementSize !== 0) {\n      // we've finished incrementing, let's reset incrementSize\n      setIncrementSize(0);\n      clearTimeout(timerID);\n      setTimerID(false);\n    }\n\n    setTimerID(setTimeout(() => executeTick(incSize), 1000));\n  };\n\n  if (+oldValue !== +props.value && incrementSize === 0) {\n    // we get new value, set up increment\n    alert((props.value - oldValue) / (delayInSeconds * refreshPerSecond));\n\n    if (!timerID) {\n      setTimerID(setTimeout(() => executeTick((props.value - oldValue) / (delayInSeconds * refreshPerSecond)), 1000));\n    }\n  }\n\n  return oldValue;\n}; //   const tickHandler = async (oldVal, newVal) => {\n//     const delayInSeconds = 3;\n//     const Herz = 25;\n//     const incrementSize = (newVal - oldVal) / (delayInSeconds * Herz);\n//     // for (let i = 1; i < delayInSeconds * Herz; i++) {\n//     //   await setTimeout(\n//     //     () => setOldValue(oldVal + i * incrementSize),\n//     //     1000 / Herz\n//     //   );\n//     // }\n//     // await setTimeout(() => setOldValue(newVal), 1000 / Herz);\n//   };\n\n\n_s(AnimatedCounter, \"ee7YzNH/GvarXiQicnzX5/49Y2E=\");\n\n_c = AnimatedCounter;\nexport default AnimatedCounter;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnimatedCounter\");","map":{"version":3,"sources":["C:/Users/97252/Documents/Projects/river/src/components/AnimatedCounter.js"],"names":["react","useState","AnimatedCounter","props","oldValue","setOldValue","incrementSize","setIncrementSize","timerID","setTimerID","delayInSeconds","refreshPerSecond","sign","number","executeTick","incSize","value","clearTimeout","setTimeout","alert"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAAA;;AACjC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,CAAD,CAAxC,CADiC,CACY;;AAC7C,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAMS,cAAc,GAAG,CAAvB;AACA,QAAMC,gBAAgB,GAAG,CAAzB;;AACA,QAAMC,IAAI,GAAIC,MAAD,IAAaA,MAAM,GAAG,CAAT,GAAa,CAAC,CAAd,GAAkB,CAA5C;;AAEA,QAAMC,WAAW,GAAIC,OAAD,IAAa;AAC/BV,IAAAA,WAAW,CAACD,QAAQ,GAAGE,aAAZ,CAAX,CAD+B,CAE/B;;AACA,QACE,CAAC,CAACF,QAAD,GAAYE,aAAb,IAA8BM,IAAI,CAACN,aAAD,CAAlC,IACE,CAACH,KAAK,CAACa,KAAP,GAAeJ,IAAI,CAACN,aAAD,CADrB,IAEAA,aAAa,KAAK,CAHpB,EAIE;AACA;AACAC,MAAAA,gBAAgB,CAAC,CAAD,CAAhB;AACAU,MAAAA,YAAY,CAACT,OAAD,CAAZ;AACAC,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AACDA,IAAAA,UAAU,CAACS,UAAU,CAAC,MAAMJ,WAAW,CAACC,OAAD,CAAlB,EAA6B,IAA7B,CAAX,CAAV;AACD,GAdD;;AAgBA,MAAI,CAACX,QAAD,KAAc,CAACD,KAAK,CAACa,KAArB,IAA8BV,aAAa,KAAK,CAApD,EAAuD;AACrD;AACAa,IAAAA,KAAK,CAAC,CAAChB,KAAK,CAACa,KAAN,GAAcZ,QAAf,KAA4BM,cAAc,GAAGC,gBAA7C,CAAD,CAAL;;AACA,QAAI,CAACH,OAAL,EAAc;AACZC,MAAAA,UAAU,CACRS,UAAU,CACR,MACEJ,WAAW,CACT,CAACX,KAAK,CAACa,KAAN,GAAcZ,QAAf,KAA4BM,cAAc,GAAGC,gBAA7C,CADS,CAFL,EAKR,IALQ,CADF,CAAV;AASD;AACF;;AAED,SAAOP,QAAP;AACD,CA1CD,C,CA4CA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAzDMF,e;;KAAAA,e;AA2DN,eAAeA,eAAf","sourcesContent":["import react from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nconst AnimatedCounter = (props) => {\r\n  const [oldValue, setOldValue] = useState(0); //useState(props.value);\r\n  const [incrementSize, setIncrementSize] = useState(0);\r\n  const [timerID, setTimerID] = useState(false);\r\n\r\n  const delayInSeconds = 3;\r\n  const refreshPerSecond = 3;\r\n  const sign = (number) => (number < 0 ? -1 : 1);\r\n\r\n  const executeTick = (incSize) => {\r\n    setOldValue(oldValue + incrementSize);\r\n    // alert(incrementSize);\r\n    if (\r\n      (+oldValue + incrementSize) * sign(incrementSize) >=\r\n        +props.value * sign(incrementSize) &&\r\n      incrementSize !== 0\r\n    ) {\r\n      // we've finished incrementing, let's reset incrementSize\r\n      setIncrementSize(0);\r\n      clearTimeout(timerID);\r\n      setTimerID(false);\r\n    }\r\n    setTimerID(setTimeout(() => executeTick(incSize), 1000));\r\n  };\r\n\r\n  if (+oldValue !== +props.value && incrementSize === 0) {\r\n    // we get new value, set up increment\r\n    alert((props.value - oldValue) / (delayInSeconds * refreshPerSecond));\r\n    if (!timerID) {\r\n      setTimerID(\r\n        setTimeout(\r\n          () =>\r\n            executeTick(\r\n              (props.value - oldValue) / (delayInSeconds * refreshPerSecond)\r\n            ),\r\n          1000\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  return oldValue;\r\n};\r\n\r\n//   const tickHandler = async (oldVal, newVal) => {\r\n//     const delayInSeconds = 3;\r\n\r\n//     const Herz = 25;\r\n//     const incrementSize = (newVal - oldVal) / (delayInSeconds * Herz);\r\n\r\n//     // for (let i = 1; i < delayInSeconds * Herz; i++) {\r\n//     //   await setTimeout(\r\n//     //     () => setOldValue(oldVal + i * incrementSize),\r\n//     //     1000 / Herz\r\n//     //   );\r\n//     // }\r\n//     // await setTimeout(() => setOldValue(newVal), 1000 / Herz);\r\n//   };\r\n\r\nexport default AnimatedCounter;\r\n"]},"metadata":{},"sourceType":"module"}
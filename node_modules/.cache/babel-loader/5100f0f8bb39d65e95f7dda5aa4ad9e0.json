{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport react from \"react\";\nimport { useState } from \"react\";\n\nconst AnimatedCounter = props => {\n  _s();\n\n  const [oldValue, setOldValue] = useState(0); //useState(props.value);\n\n  const [incrementSize, setIncrementSize] = useState(0);\n  const [timerID, setTimerID] = useState(false);\n  const delayInSeconds = 3;\n  const refreshPerSecond = 1;\n\n  const sign = number => number < 0 ? -1 : 1;\n\n  const executeTick = (oldVal, incSize) => {\n    setOldValue(oldVal + incrementSize); // alert(incrementSize);\n\n    if ((+oldVal + incSize) * sign(incSize) >= +props.value * sign(incSize)) {\n      // we've finished incrementing, let's reset incrementSize\n      setIncrementSize(0); //   clearTimeout(timerID); <-- no need since we simply do not set a new time out\n\n      setTimerID(false);\n    } else {\n      setTimerID(setTimeout(() => executeTick(incSize), 1000 * (1 / refreshPerSecond)));\n    }\n  };\n\n  if (+oldValue !== +props.value && !timerID) {\n    // we get new value, set up increment\n    let tempInc = (+props.value - +oldValue) / (delayInSeconds * refreshPerSecond);\n    setTimerID(setTimeout(() => executeTick(oldValue + tempInc, tempInc), 1000 * (1 / refreshPerSecond)));\n    return oldValue + tempInc;\n  }\n\n  return oldValue;\n}; //   const tickHandler = async (oldVal, newVal) => {\n//     const delayInSeconds = 3;\n//     const Herz = 25;\n//     const incrementSize = (newVal - oldVal) / (delayInSeconds * Herz);\n//     // for (let i = 1; i < delayInSeconds * Herz; i++) {\n//     //   await setTimeout(\n//     //     () => setOldValue(oldVal + i * incrementSize),\n//     //     1000 / Herz\n//     //   );\n//     // }\n//     // await setTimeout(() => setOldValue(newVal), 1000 / Herz);\n//   };\n\n\n_s(AnimatedCounter, \"ee7YzNH/GvarXiQicnzX5/49Y2E=\");\n\n_c = AnimatedCounter;\nexport default AnimatedCounter;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnimatedCounter\");","map":{"version":3,"sources":["C:/Users/97252/Documents/Projects/river/src/components/AnimatedCounter.js"],"names":["react","useState","AnimatedCounter","props","oldValue","setOldValue","incrementSize","setIncrementSize","timerID","setTimerID","delayInSeconds","refreshPerSecond","sign","number","executeTick","oldVal","incSize","value","setTimeout","tempInc"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAAA;;AACjC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,CAAD,CAAxC,CADiC,CACY;;AAC7C,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAMS,cAAc,GAAG,CAAvB;AACA,QAAMC,gBAAgB,GAAG,CAAzB;;AACA,QAAMC,IAAI,GAAIC,MAAD,IAAaA,MAAM,GAAG,CAAT,GAAa,CAAC,CAAd,GAAkB,CAA5C;;AAEA,QAAMC,WAAW,GAAG,CAACC,MAAD,EAASC,OAAT,KAAqB;AACvCX,IAAAA,WAAW,CAACU,MAAM,GAAGT,aAAV,CAAX,CADuC,CAEvC;;AACA,QAAI,CAAC,CAACS,MAAD,GAAUC,OAAX,IAAsBJ,IAAI,CAACI,OAAD,CAA1B,IAAuC,CAACb,KAAK,CAACc,KAAP,GAAeL,IAAI,CAACI,OAAD,CAA9D,EAAyE;AACvE;AACAT,MAAAA,gBAAgB,CAAC,CAAD,CAAhB,CAFuE,CAGvE;;AACAE,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KALD,MAKO;AACLA,MAAAA,UAAU,CACRS,UAAU,CAAC,MAAMJ,WAAW,CAACE,OAAD,CAAlB,EAA6B,QAAQ,IAAIL,gBAAZ,CAA7B,CADF,CAAV;AAGD;AACF,GAbD;;AAeA,MAAI,CAACP,QAAD,KAAc,CAACD,KAAK,CAACc,KAArB,IAA8B,CAACT,OAAnC,EAA4C;AAC1C;AACA,QAAIW,OAAO,GACT,CAAC,CAAChB,KAAK,CAACc,KAAP,GAAe,CAACb,QAAjB,KAA8BM,cAAc,GAAGC,gBAA/C,CADF;AAEAF,IAAAA,UAAU,CACRS,UAAU,CACR,MAAMJ,WAAW,CAACV,QAAQ,GAAGe,OAAZ,EAAqBA,OAArB,CADT,EAER,QAAQ,IAAIR,gBAAZ,CAFQ,CADF,CAAV;AAMA,WAAOP,QAAQ,GAAGe,OAAlB;AACD;;AAED,SAAOf,QAAP;AACD,CAtCD,C,CAwCA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GArDMF,e;;KAAAA,e;AAuDN,eAAeA,eAAf","sourcesContent":["import react from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nconst AnimatedCounter = (props) => {\r\n  const [oldValue, setOldValue] = useState(0); //useState(props.value);\r\n  const [incrementSize, setIncrementSize] = useState(0);\r\n  const [timerID, setTimerID] = useState(false);\r\n\r\n  const delayInSeconds = 3;\r\n  const refreshPerSecond = 1;\r\n  const sign = (number) => (number < 0 ? -1 : 1);\r\n\r\n  const executeTick = (oldVal, incSize) => {\r\n    setOldValue(oldVal + incrementSize);\r\n    // alert(incrementSize);\r\n    if ((+oldVal + incSize) * sign(incSize) >= +props.value * sign(incSize)) {\r\n      // we've finished incrementing, let's reset incrementSize\r\n      setIncrementSize(0);\r\n      //   clearTimeout(timerID); <-- no need since we simply do not set a new time out\r\n      setTimerID(false);\r\n    } else {\r\n      setTimerID(\r\n        setTimeout(() => executeTick(incSize), 1000 * (1 / refreshPerSecond))\r\n      );\r\n    }\r\n  };\r\n\r\n  if (+oldValue !== +props.value && !timerID) {\r\n    // we get new value, set up increment\r\n    let tempInc =\r\n      (+props.value - +oldValue) / (delayInSeconds * refreshPerSecond);\r\n    setTimerID(\r\n      setTimeout(\r\n        () => executeTick(oldValue + tempInc, tempInc),\r\n        1000 * (1 / refreshPerSecond)\r\n      )\r\n    );\r\n    return oldValue + tempInc;\r\n  }\r\n\r\n  return oldValue;\r\n};\r\n\r\n//   const tickHandler = async (oldVal, newVal) => {\r\n//     const delayInSeconds = 3;\r\n\r\n//     const Herz = 25;\r\n//     const incrementSize = (newVal - oldVal) / (delayInSeconds * Herz);\r\n\r\n//     // for (let i = 1; i < delayInSeconds * Herz; i++) {\r\n//     //   await setTimeout(\r\n//     //     () => setOldValue(oldVal + i * incrementSize),\r\n//     //     1000 / Herz\r\n//     //   );\r\n//     // }\r\n//     // await setTimeout(() => setOldValue(newVal), 1000 / Herz);\r\n//   };\r\n\r\nexport default AnimatedCounter;\r\n"]},"metadata":{},"sourceType":"module"}
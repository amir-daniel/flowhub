{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\97252\\\\Documents\\\\Projects\\\\river\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n/*global chrome*/\nimport \"./App.css\";\nimport ItemData from \"./components/ItemData\";\nimport Timer from \"./components/Timer\";\nimport react from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  let [time, setTime] = useState(null);\n  let [getStart, setStart] = useState(null);\n  let [getCurrent, setCurrent] = useState(null);\n  let [getEnd, setEnd] = useState(null);\n  let [TimersID, setTimersID] = useState(false);\n  let getTime = useRef();\n  let getTimersID = useRef();\n  getTimersID.current = TimersID;\n  getTime.current = time;\n  useEffect(() => {\n    chrome.storage.sync.get([\"startedRecordingAt\", \"savedTime\"], data => {\n      setTime(data.startedRecordingAt === null ? data.savedTime === null ? 0 : data.savedTime : (Date.now() - data.startedRecordingAt) / 1000);\n    });\n    chrome.storage.sync.get([\"start\", \"progress\", \"end\"], data => {\n      setCurrent(data.progress);\n      setEnd(data.end);\n      setStart(data.start);\n    }); // chrome.storage.sync.get([\"isTimerOn\"], (data) => {\n    //   setTimersID(data.isTimerOn);\n    // });\n  }, []);\n\n  const changeHandler = () => {\n    setTime(getTime.current + 1);\n  };\n\n  const resetHandler = () => {\n    setTime(0);\n    setStart(0);\n    setCurrent(0);\n    setEnd(0);\n    chrome.storage.sync.set({\n      start: 0,\n      progress: 0,\n      end: 0\n    }); // if reset mode requested, reset timer!\n  };\n\n  const minHandler = event => {\n    if (+event.target.value <= getCurrent) {\n      setStart(+event.target.value);\n      chrome.storage.sync.set({\n        start: +event.target.value\n      });\n    }\n  };\n\n  const currentHandler = event => {\n    if (+event.target.value >= getStart) {\n      if (+event.target.value <= getEnd) {\n        setCurrent(+event.target.value);\n        chrome.storage.sync.set({\n          progress: +event.target.value\n        });\n      }\n    }\n  };\n\n  const maxHandler = event => {\n    if (+event.target.value >= getCurrent) {\n      setEnd(+event.target.value);\n      chrome.storage.sync.set({\n        end: +event.target.value\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => {\n            if (getTimersID.current !== false) {\n              alert(\"Can't proceed while timer is active.\");\n              return;\n            }\n\n            let x = prompt(\"Enter amount of time to load in the following format: h:mm:ss\");\n            let timeArr = x.split(\":\").reverse();\n\n            if (timeArr.length !== 3) {\n              alert(\"Invalid input! Too many or too few fields were input.\");\n              return;\n            }\n\n            if (!Number.isInteger(+timeArr[0]) || !Number.isInteger(+timeArr[1]) || !Number.isInteger(+timeArr[2])) {\n              alert(\"Invalid input! All fields must be integers.\");\n              return;\n            } //All checks passed, now we're diving in to the addition.\n\n\n            let desiredTimeInSeconds = +timeArr[0] + +timeArr[1] * 60 + +timeArr[2] * 3600 + getTime.current;\n            setTime(desiredTimeInSeconds);\n            chrome.storage.sync.set({\n              savedTime: desiredTimeInSeconds\n            });\n          },\n          src: \"./logo.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ItemData, {\n          itemMin: getStart,\n          itemMax: getEnd,\n          progress: getCurrent,\n          onMinChange: minHandler,\n          onCurrentChange: currentHandler,\n          onMaxChange: maxHandler,\n          time: getTime,\n          timerID: getTimersID,\n          setTimerID: id => {\n            setTimersID(id);\n          },\n          onTick: changeHandler,\n          onReset: resetHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"uutDvF0hu5Nxp5MleS2P1eZL89c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/97252/Documents/Projects/river/src/App.js"],"names":["ItemData","Timer","react","useState","useEffect","useRef","App","time","setTime","getStart","setStart","getCurrent","setCurrent","getEnd","setEnd","TimersID","setTimersID","getTime","getTimersID","current","chrome","storage","sync","get","data","startedRecordingAt","savedTime","Date","now","progress","end","start","changeHandler","resetHandler","set","minHandler","event","target","value","currentHandler","maxHandler","alert","x","prompt","timeArr","split","reverse","length","Number","isInteger","desiredTimeInSeconds","id"],"mappings":"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","sourcesContent":["/*global chrome*/\nimport \"./App.css\";\nimport ItemData from \"./components/ItemData\";\nimport Timer from \"./components/Timer\";\nimport react from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\n\nfunction App() {\n  let [time, setTime] = useState(null);\n  let [getStart, setStart] = useState(null);\n  let [getCurrent, setCurrent] = useState(null);\n  let [getEnd, setEnd] = useState(null);\n  let [TimersID, setTimersID] = useState(false);\n  let getTime = useRef();\n  let getTimersID = useRef();\n\n  getTimersID.current = TimersID;\n  getTime.current = time;\n\n  useEffect(() => {\n    chrome.storage.sync.get([\"startedRecordingAt\", \"savedTime\"], (data) => {\n      setTime(\n        data.startedRecordingAt === null\n          ? data.savedTime === null\n            ? 0\n            : data.savedTime\n          : (Date.now() - data.startedRecordingAt) / 1000\n      );\n    });\n\n    chrome.storage.sync.get([\"start\", \"progress\", \"end\"], (data) => {\n      setCurrent(data.progress);\n      setEnd(data.end);\n      setStart(data.start);\n    });\n\n    // chrome.storage.sync.get([\"isTimerOn\"], (data) => {\n    //   setTimersID(data.isTimerOn);\n    // });\n  }, []);\n\n  const changeHandler = () => {\n    setTime(getTime.current + 1);\n  };\n  const resetHandler = () => {\n    setTime(0);\n    setStart(0);\n    setCurrent(0);\n    setEnd(0);\n    chrome.storage.sync.set({\n      start: 0,\n      progress: 0,\n      end: 0,\n    });\n    // if reset mode requested, reset timer!\n  };\n\n  const minHandler = (event) => {\n    if (+event.target.value <= getCurrent) {\n      setStart(+event.target.value);\n      chrome.storage.sync.set({ start: +event.target.value });\n    }\n  };\n  const currentHandler = (event) => {\n    if (+event.target.value >= getStart) {\n      if (+event.target.value <= getEnd) {\n        setCurrent(+event.target.value);\n        chrome.storage.sync.set({ progress: +event.target.value });\n      }\n    }\n  };\n  const maxHandler = (event) => {\n    if (+event.target.value >= getCurrent) {\n      setEnd(+event.target.value);\n      chrome.storage.sync.set({ end: +event.target.value });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          {/* <Timer\n            value={getTime}\n            onTick={changeHandler}\n            timerID={getTimersID}\n            modifyTimerID={(id) => {\n              setTimersID(id);\n            }}\n          /> */}\n          <img\n            onClick={() => {\n              if (getTimersID.current !== false) {\n                alert(\"Can't proceed while timer is active.\");\n                return;\n              }\n\n              let x = prompt(\n                \"Enter amount of time to load in the following format: h:mm:ss\"\n              );\n\n              let timeArr = x.split(\":\").reverse();\n\n              if (timeArr.length !== 3) {\n                alert(\"Invalid input! Too many or too few fields were input.\");\n                return;\n              }\n\n              if (\n                !Number.isInteger(+timeArr[0]) ||\n                !Number.isInteger(+timeArr[1]) ||\n                !Number.isInteger(+timeArr[2])\n              ) {\n                alert(\"Invalid input! All fields must be integers.\");\n                return;\n              }\n\n              //All checks passed, now we're diving in to the addition.\n\n              let desiredTimeInSeconds =\n                +timeArr[0] +\n                +timeArr[1] * 60 +\n                +timeArr[2] * 3600 +\n                getTime.current;\n\n              setTime(desiredTimeInSeconds);\n\n              chrome.storage.sync.set({\n                savedTime: desiredTimeInSeconds,\n              });\n            }}\n            src=\"./logo.png\"\n          />\n          <ItemData\n            itemMin={getStart}\n            itemMax={getEnd}\n            progress={getCurrent}\n            onMinChange={minHandler}\n            onCurrentChange={currentHandler}\n            onMaxChange={maxHandler}\n            time={getTime}\n            timerID={getTimersID}\n            setTimerID={(id) => {\n              setTimersID(id);\n            }}\n            onTick={changeHandler}\n            onReset={resetHandler}\n          />\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
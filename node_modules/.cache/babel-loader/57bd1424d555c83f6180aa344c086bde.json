{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport react from \"react\";\nimport { useState } from \"react\";\n\nconst AnimatedCounter = props => {\n  _s();\n\n  const [oldValue, setOldValue] = useState(0); //useState(props.value);\n\n  const [incrementSize, setIncrementSize] = useState(0);\n  const [timerID, setTimerID] = useState(false);\n  const delayInSeconds = 3;\n  const refreshPerSecond = 3;\n\n  const sign = number => number < 0 ? -1 : 1;\n\n  if (incrementSize !== 0) {\n    if ((+oldValue + incrementSize) * sign(incrementSize) >= +props.value * sign(incrementSize)) {\n      // we've finished incrementing, let's reset incrementSize\n      setIncrementSize(0);\n      clearInterval(timerID);\n      setTimerID(false);\n    } else {// there's an increment already ongoing, let's keep adding\n      //   setOldValue((prevState) => prevState + incrementSize);\n    }\n  } else {\n    if (+oldValue !== +props.value) {\n      // we get new value, set up increment\n      setIncrementSize((props.value - oldValue) / 2);\n      setTimerID(setInterval(() => {\n        setOldValue(prevState => prevState + incrementSize);\n      }, 300));\n    }\n  }\n\n  return oldValue + incrementSize;\n}; //   const tickHandler = async (oldVal, newVal) => {\n//     const delayInSeconds = 3;\n//     const Herz = 25;\n//     const incrementSize = (newVal - oldVal) / (delayInSeconds * Herz);\n//     // for (let i = 1; i < delayInSeconds * Herz; i++) {\n//     //   await setTimeout(\n//     //     () => setOldValue(oldVal + i * incrementSize),\n//     //     1000 / Herz\n//     //   );\n//     // }\n//     // await setTimeout(() => setOldValue(newVal), 1000 / Herz);\n//   };\n\n\n_s(AnimatedCounter, \"ee7YzNH/GvarXiQicnzX5/49Y2E=\");\n\n_c = AnimatedCounter;\nexport default AnimatedCounter;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnimatedCounter\");","map":{"version":3,"sources":["C:/Users/97252/Documents/Projects/river/src/components/AnimatedCounter.js"],"names":["react","useState","AnimatedCounter","props","oldValue","setOldValue","incrementSize","setIncrementSize","timerID","setTimerID","delayInSeconds","refreshPerSecond","sign","number","value","clearInterval","setInterval","prevState"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAAA;;AACjC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,CAAD,CAAxC,CADiC,CACY;;AAC7C,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAMS,cAAc,GAAG,CAAvB;AACA,QAAMC,gBAAgB,GAAG,CAAzB;;AACA,QAAMC,IAAI,GAAIC,MAAD,IAAaA,MAAM,GAAG,CAAT,GAAa,CAAC,CAAd,GAAkB,CAA5C;;AAEA,MAAIP,aAAa,KAAK,CAAtB,EAAyB;AACvB,QACE,CAAC,CAACF,QAAD,GAAYE,aAAb,IAA8BM,IAAI,CAACN,aAAD,CAAlC,IACA,CAACH,KAAK,CAACW,KAAP,GAAeF,IAAI,CAACN,aAAD,CAFrB,EAGE;AACA;AACAC,MAAAA,gBAAgB,CAAC,CAAD,CAAhB;AACAQ,MAAAA,aAAa,CAACP,OAAD,CAAb;AACAC,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KARD,MAQO,CACL;AACA;AACD;AACF,GAbD,MAaO;AACL,QAAI,CAACL,QAAD,KAAc,CAACD,KAAK,CAACW,KAAzB,EAAgC;AAC9B;AACAP,MAAAA,gBAAgB,CAAC,CAACJ,KAAK,CAACW,KAAN,GAAcV,QAAf,IAA2B,CAA5B,CAAhB;AACAK,MAAAA,UAAU,CACRO,WAAW,CAAC,MAAM;AAChBX,QAAAA,WAAW,CAAEY,SAAD,IAAeA,SAAS,GAAGX,aAA5B,CAAX;AACD,OAFU,EAER,GAFQ,CADH,CAAV;AAKD;AACF;;AAED,SAAOF,QAAQ,GAAGE,aAAlB;AACD,CAnCD,C,CAqCA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAlDMJ,e;;KAAAA,e;AAoDN,eAAeA,eAAf","sourcesContent":["import react from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nconst AnimatedCounter = (props) => {\r\n  const [oldValue, setOldValue] = useState(0); //useState(props.value);\r\n  const [incrementSize, setIncrementSize] = useState(0);\r\n  const [timerID, setTimerID] = useState(false);\r\n\r\n  const delayInSeconds = 3;\r\n  const refreshPerSecond = 3;\r\n  const sign = (number) => (number < 0 ? -1 : 1);\r\n\r\n  if (incrementSize !== 0) {\r\n    if (\r\n      (+oldValue + incrementSize) * sign(incrementSize) >=\r\n      +props.value * sign(incrementSize)\r\n    ) {\r\n      // we've finished incrementing, let's reset incrementSize\r\n      setIncrementSize(0);\r\n      clearInterval(timerID);\r\n      setTimerID(false);\r\n    } else {\r\n      // there's an increment already ongoing, let's keep adding\r\n      //   setOldValue((prevState) => prevState + incrementSize);\r\n    }\r\n  } else {\r\n    if (+oldValue !== +props.value) {\r\n      // we get new value, set up increment\r\n      setIncrementSize((props.value - oldValue) / 2);\r\n      setTimerID(\r\n        setInterval(() => {\r\n          setOldValue((prevState) => prevState + incrementSize);\r\n        }, 300)\r\n      );\r\n    }\r\n  }\r\n\r\n  return oldValue + incrementSize;\r\n};\r\n\r\n//   const tickHandler = async (oldVal, newVal) => {\r\n//     const delayInSeconds = 3;\r\n\r\n//     const Herz = 25;\r\n//     const incrementSize = (newVal - oldVal) / (delayInSeconds * Herz);\r\n\r\n//     // for (let i = 1; i < delayInSeconds * Herz; i++) {\r\n//     //   await setTimeout(\r\n//     //     () => setOldValue(oldVal + i * incrementSize),\r\n//     //     1000 / Herz\r\n//     //   );\r\n//     // }\r\n//     // await setTimeout(() => setOldValue(newVal), 1000 / Herz);\r\n//   };\r\n\r\nexport default AnimatedCounter;\r\n"]},"metadata":{},"sourceType":"module"}